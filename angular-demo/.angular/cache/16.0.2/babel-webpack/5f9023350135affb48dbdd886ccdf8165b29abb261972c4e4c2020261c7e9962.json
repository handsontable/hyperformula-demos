{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { checkKeySchema, extractTime } from './licenseKeyHelper';\n/**\r\n * List of all not valid messages which may occur.\r\n */\nconst consoleMessages = {\n  invalid: () => 'The license key for HyperFormula is invalid.',\n  expired: ({\n    keyValidityDate\n  }) => 'The license key for HyperFormula expired' + ` on ${keyValidityDate}, and is not valid for the installed version.`,\n  missing: () => 'The license key for HyperFormula is missing.'\n};\nlet _notified = false;\n/**\r\n * Checks if the provided license key is grammatically valid or not expired.\r\n *\r\n * @param {string} licenseKey The license key to check.\r\n * @returns {LicenseKeyValidityState} Returns the checking state.\r\n */\nexport function checkLicenseKeyValidity(licenseKey) {\n  const messageDescriptor = {\n    template: \"missing\" /* MISSING */,\n    vars: {}\n  };\n  if (licenseKey === 'gpl-v3' || licenseKey === 'internal-use-in-handsontable') {\n    messageDescriptor.template = \"valid\" /* VALID */;\n  } else if (typeof licenseKey === 'string' && checkKeySchema(licenseKey)) {\n    const [day, month, year] = (\"24/04/2023\" || '').split('/');\n    const releaseDays = Math.floor(new Date(`${month}/${day}/${year}`).getTime() / 8.64e7);\n    const keyValidityDays = extractTime(licenseKey);\n    messageDescriptor.vars.keyValidityDate = formatDate(new Date((keyValidityDays + 1) * 8.64e7));\n    if (releaseDays > keyValidityDays) {\n      messageDescriptor.template = \"expired\" /* EXPIRED */;\n    } else {\n      messageDescriptor.template = \"valid\" /* VALID */;\n    }\n  } else if (licenseKey !== '') {\n    messageDescriptor.template = \"invalid\" /* INVALID */;\n  }\n\n  if (!_notified && messageDescriptor.template !== \"valid\" /* VALID */) {\n    console.warn(consoleMessages[messageDescriptor.template](messageDescriptor.vars));\n    _notified = true;\n  }\n  return messageDescriptor.template;\n}\n/**\r\n * Formats a Date instance to hard-coded format MMMM DD, YYYY.\r\n *\r\n * @param {Date} date The date to format.\r\n * @returns {string}\r\n */\nfunction formatDate(date) {\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const month = monthNames[date.getMonth()];\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return `${month} ${day}, ${year}`;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}