{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange, AbsoluteColumnRange, AbsoluteRowRange } from '../AbsoluteCellRange';\nexport class AddressDependency {\n  constructor(dependency) {\n    this.dependency = dependency;\n  }\n  absolutize(baseAddress) {\n    return this.dependency.toSimpleCellAddress(baseAddress);\n  }\n}\nexport class CellRangeDependency {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n  absolutize(baseAddress) {\n    return new AbsoluteCellRange(this.start.toSimpleCellAddress(baseAddress), this.end.toSimpleCellAddress(baseAddress));\n  }\n}\nexport class ColumnRangeDependency {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n  absolutize(baseAddress) {\n    const start = this.start.toSimpleColumnAddress(baseAddress);\n    const end = this.end.toSimpleColumnAddress(baseAddress);\n    return new AbsoluteColumnRange(start.sheet, start.col, end.col);\n  }\n}\nexport class RowRangeDependency {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n  absolutize(baseAddress) {\n    const start = this.start.toSimpleRowAddress(baseAddress);\n    const end = this.end.toSimpleRowAddress(baseAddress);\n    return new AbsoluteRowRange(start.sheet, start.row, end.row);\n  }\n}\nexport class NamedExpressionDependency {\n  constructor(name) {\n    this.name = name;\n  }\n  absolutize(_baseAddress) {\n    return this;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}