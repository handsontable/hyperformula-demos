{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\n/**\r\n * Interpreter plugin containing MEDIAN function\r\n */\nexport class MedianPlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to MEDIAN(Number1, Number2, ...).\r\n   *\r\n   * Returns a median of given numbers.\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  median(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('MEDIAN'), (...args) => {\n      const values = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (values instanceof CellError) {\n        return values;\n      }\n      if (values.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      values.sort((a, b) => a - b);\n      if (values.length % 2 === 0) {\n        return (values[values.length / 2 - 1] + values[values.length / 2]) / 2;\n      } else {\n        return values[Math.floor(values.length / 2)];\n      }\n    });\n  }\n  large(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('LARGE'), (range, n) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      vals.sort((a, b) => a - b);\n      n = Math.trunc(n);\n      if (n > vals.length) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return vals[vals.length - n];\n    });\n  }\n  small(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SMALL'), (range, n) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      vals.sort((a, b) => a - b);\n      n = Math.trunc(n);\n      if (n > vals.length) {\n        return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);\n      }\n      return vals[n - 1];\n    });\n  }\n}\nMedianPlugin.implementedFunctions = {\n  'MEDIAN': {\n    method: 'median',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'LARGE': {\n    method: 'large',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  },\n  'SMALL': {\n    method: 'small',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      minValue: 1\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}