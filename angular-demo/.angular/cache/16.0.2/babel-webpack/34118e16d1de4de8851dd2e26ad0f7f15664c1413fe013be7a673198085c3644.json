{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nexport const EmptyValue = Symbol('Empty value');\nexport function getRawValue(num) {\n  if (num instanceof RichNumber) {\n    return num.val;\n  } else {\n    return num;\n  }\n}\nexport class RichNumber {\n  constructor(val, format) {\n    this.val = val;\n    this.format = format;\n  }\n  fromNumber(val) {\n    return new this.constructor(val);\n  }\n}\nexport function cloneNumber(val, newVal) {\n  if (typeof val === 'number') {\n    return newVal;\n  } else {\n    const ret = val.fromNumber(newVal);\n    ret.format = val.format;\n    return ret;\n  }\n}\nexport class DateNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATE;\n  }\n}\nexport class CurrencyNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_CURRENCY;\n  }\n}\nexport class TimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_TIME;\n  }\n}\nexport class DateTimeNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_DATETIME;\n  }\n}\nexport class PercentNumber extends RichNumber {\n  getDetailedType() {\n    return NumberType.NUMBER_PERCENT;\n  }\n}\nexport function isExtendedNumber(val) {\n  return typeof val === 'number' || val instanceof RichNumber;\n}\nexport var NumberType = /*#__PURE__*/(() => {\n  NumberType = NumberType || {};\n  NumberType[\"NUMBER_RAW\"] = \"NUMBER_RAW\";\n  NumberType[\"NUMBER_DATE\"] = \"NUMBER_DATE\";\n  NumberType[\"NUMBER_TIME\"] = \"NUMBER_TIME\";\n  NumberType[\"NUMBER_DATETIME\"] = \"NUMBER_DATETIME\";\n  NumberType[\"NUMBER_CURRENCY\"] = \"NUMBER_CURRENCY\";\n  NumberType[\"NUMBER_PERCENT\"] = \"NUMBER_PERCENT\";\n  return NumberType;\n})();\nexport function getTypeOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.getDetailedType();\n  } else {\n    return NumberType.NUMBER_RAW;\n  }\n}\nexport function getFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return num.format;\n  } else {\n    return undefined;\n  }\n}\nexport function getTypeFormatOfExtendedNumber(num) {\n  if (num instanceof RichNumber) {\n    return {\n      type: num.getDetailedType(),\n      format: num.format\n    };\n  } else {\n    return {\n      type: NumberType.NUMBER_RAW\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}