{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { HyperFormula } from '../../HyperFormula';\nimport { FunctionPlugin } from './FunctionPlugin';\nconst LICENSE_STATUS_MAP = new Map([['gpl-v3', 1], [\"missing\" /* MISSING */, 2], [\"invalid\" /* INVALID */, 3], [\"expired\" /* EXPIRED */, 4]]);\nexport let VersionPlugin = /*#__PURE__*/(() => {\n  class VersionPlugin extends FunctionPlugin {\n    version(ast, state) {\n      return this.runFunction(ast.args, state, this.metadata('VERSION'), () => {\n        const {\n          licenseKeyValidityState: validityState,\n          licenseKey\n        } = this.config;\n        let status;\n        if (LICENSE_STATUS_MAP.has(licenseKey)) {\n          status = LICENSE_STATUS_MAP.get(licenseKey);\n        } else if (LICENSE_STATUS_MAP.has(validityState)) {\n          status = LICENSE_STATUS_MAP.get(validityState);\n        } else if (validityState === \"valid\" /* VALID */) {\n          status = licenseKey.slice(-5);\n        }\n        return `HyperFormula v${HyperFormula.version}, ${status}`;\n      });\n    }\n  }\n  VersionPlugin.implementedFunctions = {\n    'VERSION': {\n      method: 'version',\n      parameters: []\n    }\n  };\n  return VersionPlugin;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}