{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { InvalidArgumentsError } from './errors';\nexport function validateAsSheet(sheet) {\n  if (!Array.isArray(sheet)) {\n    throw new InvalidArgumentsError('an array of arrays.');\n  }\n  for (let i = 0; i < sheet.length; i++) {\n    if (!Array.isArray(sheet[i])) {\n      throw new InvalidArgumentsError('an array of arrays.');\n    }\n  }\n}\n/**\r\n * Returns actual width, height and fill ratio of a sheet\r\n *\r\n * @param sheet - two-dimmensional array sheet representation\r\n */\nexport function findBoundaries(sheet) {\n  let width = 0;\n  let height = 0;\n  let cellsCount = 0;\n  for (let currentRow = 0; currentRow < sheet.length; currentRow++) {\n    let currentRowWidth = 0;\n    for (let currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {\n      const currentValue = sheet[currentRow][currentCol];\n      if (currentValue === undefined || currentValue === null) {\n        continue;\n      }\n      currentRowWidth = currentCol + 1;\n      ++cellsCount;\n    }\n    width = Math.max(width, currentRowWidth);\n    if (currentRowWidth > 0) {\n      height = currentRow + 1;\n    }\n  }\n  const sheetSize = width * height;\n  return {\n    height: height,\n    width: width,\n    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}