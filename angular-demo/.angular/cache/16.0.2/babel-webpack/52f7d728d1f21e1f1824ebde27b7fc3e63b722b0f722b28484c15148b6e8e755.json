{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { contains, every, has, some } from \"../../../utils/utils\";\nimport { AbstractProduction, Alternation, Flat, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast_public\";\nimport { GAstVisitor } from \"./gast_visitor_public\";\nexport function isSequenceProd(prod) {\n  return prod instanceof Flat || prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionMandatory || prod instanceof RepetitionMandatoryWithSeparator || prod instanceof RepetitionWithSeparator || prod instanceof Terminal || prod instanceof Rule;\n}\nexport function isOptionalProd(prod, alreadyVisited) {\n  if (alreadyVisited === void 0) {\n    alreadyVisited = [];\n  }\n  var isDirectlyOptional = prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && contains(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(prod.definition, function (subProd) {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else {\n    return false;\n  }\n}\nexport function isBranchingProd(prod) {\n  return prod instanceof Alternation;\n}\nexport function getProductionDslName(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nvar DslMethodsCollectorVisitor = /** @class */function (_super) {\n  __extends(DslMethodsCollectorVisitor, _super);\n  function DslMethodsCollectorVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    // A minus is never valid in an identifier name\n    _this.separator = \"-\";\n    _this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n    return _this;\n  }\n  DslMethodsCollectorVisitor.prototype.reset = function () {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: []\n    };\n  };\n  DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {\n    var key = terminal.terminalType.name + this.separator + \"Terminal\";\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n    this.dslMethods[key].push(terminal);\n  };\n  DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {\n    var key = subrule.nonTerminalName + this.separator + \"Terminal\";\n    if (!has(this.dslMethods, key)) {\n      this.dslMethods[key] = [];\n    }\n    this.dslMethods[key].push(subrule);\n  };\n  DslMethodsCollectorVisitor.prototype.visitOption = function (option) {\n    this.dslMethods.option.push(option);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  };\n  DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {\n    this.dslMethods.repetition.push(many);\n  };\n  DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {\n    this.dslMethods.alternation.push(or);\n  };\n  return DslMethodsCollectorVisitor;\n}(GAstVisitor);\nexport { DslMethodsCollectorVisitor };\nvar collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule) {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  var dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return dslMethods;\n}\n//# sourceMappingURL=gast.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}