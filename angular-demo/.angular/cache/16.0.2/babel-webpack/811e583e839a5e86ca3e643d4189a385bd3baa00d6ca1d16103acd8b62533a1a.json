{"ast":null,"code":"import _defineProperty from \"C:/Users/jakub/HotRepos/hyperformula-demos/angular-demo/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { initHFValues, initializeHF, initializeNamedExpressions } from './employees.helper';\nimport { EMPLOYEES } from \"./employees-mock\";\nimport * as i0 from \"@angular/core\";\nconst TOTALS = [\"=SUM(Year_1)\", \"=SUM(Year_2)\"];\nconst EMPLOYEE_SHEET_ID = \"employeeSheet\";\nexport let EmployeesService = /*#__PURE__*/(() => {\n  class EmployeesService {\n    constructor() {\n      _defineProperty(this, \"hf\", void 0);\n      _defineProperty(this, \"sheetId\", void 0);\n      _defineProperty(this, \"sheetName\", void 0);\n      _defineProperty(this, \"_employees\", new BehaviorSubject([]));\n      _defineProperty(this, \"_totals\", new BehaviorSubject([]));\n      _defineProperty(this, \"dataStore\", {\n        employees: [],\n        totals: []\n      });\n      _defineProperty(this, \"employees\", this._employees.asObservable());\n      _defineProperty(this, \"totals\", this._totals.asObservable());\n      const {\n        hf,\n        sheetId,\n        sheetName\n      } = initializeHF(EMPLOYEE_SHEET_ID);\n      this.hf = hf;\n      this.sheetId = sheetId;\n      this.sheetName = sheetName;\n      // Fill the HyperFormula sheet with data.\n      initHFValues(hf, sheetId, EMPLOYEES);\n      // Add named expressions\n      initializeNamedExpressions(hf, sheetName);\n      this.reset();\n    }\n    calculate() {\n      console.log(this.dataStore);\n      this.dataStore.employees = this.hf.getSheetValues(this.sheetId).map(values => {\n        const newValues = [];\n        values.forEach(value => {\n          if (!isNaN(value)) {\n            newValues.push(value.toFixed(2));\n          } else {\n            newValues.push(value);\n          }\n        });\n        return newValues;\n      });\n      this.dataStore.totals = TOTALS.map(expression => {\n        return this.hf.calculateFormula(expression, this.sheetId).toFixed(2);\n      });\n      this._employees.next([...this.dataStore.employees]);\n      this._totals.next(Object.assign({}, this.dataStore).totals);\n    }\n    reset() {\n      console.log(this.dataStore);\n      this.dataStore.employees = EMPLOYEES;\n      this.dataStore.totals = TOTALS;\n      this._employees.next(Object.assign({}, this.dataStore).employees);\n      this._totals.next(Object.assign({}, this.dataStore).totals);\n    }\n  }\n  _defineProperty(EmployeesService, \"\\u0275fac\", function EmployeesService_Factory(t) {\n    return new (t || EmployeesService)();\n  });\n  _defineProperty(EmployeesService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeesService,\n    factory: EmployeesService.ɵfac,\n    providedIn: \"root\"\n  }));\n  return EmployeesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}