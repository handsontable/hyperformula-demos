{"ast":null,"code":"import { forEach, map } from \"../utils/utils\";\nimport { RepetitionMandatory, Option, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Terminal, NonTerminal, Alternation, Flat, Repetition } from \"../parse/grammar/gast/gast_public\";\n/**\n * Missing features\n * 1. Rule arguments\n * 2. Gates\n * 3. embedded actions\n */\nvar NL = \"\\n\";\nexport function genUmdModule(options) {\n  return \"\\n(function (root, factory) {\\n    if (typeof define === 'function' && define.amd) {\\n        // AMD. Register as an anonymous module.\\n        define(['chevrotain'], factory);\\n    } else if (typeof module === 'object' && module.exports) {\\n        // Node. Does not work with strict CommonJS, but\\n        // only CommonJS-like environments that support module.exports,\\n        // like Node.\\n        module.exports = factory(require('chevrotain'));\\n    } else {\\n        // Browser globals (root is window)\\n        root.returnExports = factory(root.b);\\n    }\\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\\n\\n\" + genClass(options) + \"\\n    \\nreturn {\\n    \" + options.name + \": \" + options.name + \" \\n}\\n}));\\n\";\n}\nexport function genWrapperFunction(options) {\n  return \"    \\n\" + genClass(options) + \"\\nreturn new \" + options.name + \"(tokenVocabulary, config)    \\n\";\n}\nexport function genClass(options) {\n  // TODO: how to pass the token vocabulary? Constructor? other?\n  var result = \"\\nfunction \" + options.name + \"(tokenVocabulary, config) {\\n    // invoke super constructor\\n    // No support for embedded actions currently, so we can 'hardcode'\\n    // The use of CstParser.\\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\\n\\n    const $ = this\\n\\n    \" + genAllRules(options.rules) + \"\\n\\n    // very important to call this after all the rules have been defined.\\n    // otherwise the parser may not work correctly as it will lack information\\n    // derived during the self analysis phase.\\n    this.performSelfAnalysis(this)\\n}\\n\\n// inheritance as implemented in javascript in the previous decade... :(\\n\" + options.name + \".prototype = Object.create(chevrotain.CstParser.prototype)\\n\" + options.name + \".prototype.constructor = \" + options.name + \"    \\n    \";\n  return result;\n}\nexport function genAllRules(rules) {\n  var rulesText = map(rules, function (currRule) {\n    return genRule(currRule, 1);\n  });\n  return rulesText.join(\"\\n\");\n}\nexport function genRule(prod, n) {\n  var result = indent(n, \"$.RULE(\\\"\" + prod.name + \"\\\", function() {\") + NL;\n  result += genDefinition(prod.definition, n + 1);\n  result += indent(n + 1, \"})\") + NL;\n  return result;\n}\nexport function genTerminal(prod, n) {\n  var name = prod.terminalType.name;\n  // TODO: potential performance optimization, avoid tokenMap Dictionary access\n  return indent(n, \"$.CONSUME\" + prod.idx + \"(this.tokensMap.\" + name + \")\" + NL);\n}\nexport function genNonTerminal(prod, n) {\n  return indent(n, \"$.SUBRULE\" + prod.idx + \"($.\" + prod.nonTerminalName + \")\" + NL);\n}\nexport function genAlternation(prod, n) {\n  var result = indent(n, \"$.OR\" + prod.idx + \"([\") + NL;\n  var alts = map(prod.definition, function (altDef) {\n    return genSingleAlt(altDef, n + 1);\n  });\n  result += alts.join(\",\" + NL);\n  result += NL + indent(n, \"])\" + NL);\n  return result;\n}\nexport function genSingleAlt(prod, n) {\n  var result = indent(n, \"{\") + NL;\n  if (prod.name) {\n    result += indent(n + 1, \"NAME: \\\"\" + prod.name + \"\\\",\") + NL;\n  }\n  result += indent(n + 1, \"ALT: function() {\") + NL;\n  result += genDefinition(prod.definition, n + 1);\n  result += indent(n + 1, \"}\") + NL;\n  result += indent(n, \"}\");\n  return result;\n}\nfunction genProd(prod, n) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return genNonTerminal(prod, n);\n  } else if (prod instanceof Option) {\n    return genDSLRule(\"OPTION\", prod, n);\n  } else if (prod instanceof RepetitionMandatory) {\n    return genDSLRule(\"AT_LEAST_ONE\", prod, n);\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return genDSLRule(\"AT_LEAST_ONE_SEP\", prod, n);\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return genDSLRule(\"MANY_SEP\", prod, n);\n  } else if (prod instanceof Repetition) {\n    return genDSLRule(\"MANY\", prod, n);\n  } else if (prod instanceof Alternation) {\n    return genAlternation(prod, n);\n  } else if (prod instanceof Terminal) {\n    return genTerminal(prod, n);\n  } else if (prod instanceof Flat) {\n    return genDefinition(prod.definition, n);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nfunction genDSLRule(dslName, prod, n) {\n  var result = indent(n, \"$.\" + (dslName + prod.idx) + \"(\");\n  if (prod.name || prod.separator) {\n    result += \"{\" + NL;\n    if (prod.name) {\n      result += indent(n + 1, \"NAME: \\\"\" + prod.name + \"\\\"\") + \",\" + NL;\n    }\n    if (prod.separator) {\n      result += indent(n + 1, \"SEP: this.tokensMap.\" + prod.separator.name) + \",\" + NL;\n    }\n    result += \"DEF: \" + genDefFunction(prod.definition, n + 2) + NL;\n    result += indent(n, \"}\") + NL;\n  } else {\n    result += genDefFunction(prod.definition, n + 1);\n  }\n  result += indent(n, \")\") + NL;\n  return result;\n}\nfunction genDefFunction(definition, n) {\n  var def = \"function() {\" + NL;\n  def += genDefinition(definition, n);\n  def += indent(n, \"}\") + NL;\n  return def;\n}\nfunction genDefinition(def, n) {\n  var result = \"\";\n  forEach(def, function (prod) {\n    result += genProd(prod, n + 1);\n  });\n  return result;\n}\nfunction indent(howMuch, text) {\n  var spaces = Array(howMuch * 4 + 1).join(\" \");\n  return spaces + text;\n}\n//# sourceMappingURL=generate.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}