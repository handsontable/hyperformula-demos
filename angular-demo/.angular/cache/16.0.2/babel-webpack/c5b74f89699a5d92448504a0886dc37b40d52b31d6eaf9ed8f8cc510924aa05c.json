{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nexport class NumberLiteralHelper {\n  constructor(config) {\n    this.config = config;\n    const thousandSeparator = this.config.thousandSeparator === '.' ? `\\\\${this.config.thousandSeparator}` : this.config.thousandSeparator;\n    const decimalSeparator = this.config.decimalSeparator === '.' ? `\\\\${this.config.decimalSeparator}` : this.config.decimalSeparator;\n    this.numberPattern = new RegExp(`^([+-]?((${decimalSeparator}\\\\d+)|(\\\\d+(${thousandSeparator}\\\\d{3,})*(${decimalSeparator}\\\\d*)?)))(e[+-]?\\\\d+)?$`);\n    this.allThousandSeparatorsRegex = new RegExp(`${thousandSeparator}`, 'g');\n  }\n  numericStringToMaybeNumber(input) {\n    if (this.numberPattern.test(input)) {\n      const num = this.numericStringToNumber(input);\n      if (isNaN(num)) {\n        return undefined;\n      }\n      return num;\n    }\n    return undefined;\n  }\n  numericStringToNumber(input) {\n    const normalized = input.replace(this.allThousandSeparatorsRegex, '').replace(this.config.decimalSeparator, '.');\n    return Number(normalized);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}