{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ArraySize } from './ArraySize';\nimport { EmptyValue } from './interpreter/InterpreterValue';\nimport { SimpleRangeValue } from './SimpleRangeValue';\nexport class NotComputedArray {\n  constructor(size) {\n    this.size = size;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    throw Error('Array not computed yet.');\n  }\n  simpleRangeValue() {\n    throw Error('Array not computed yet.');\n  }\n}\nexport class ArrayValue {\n  constructor(array) {\n    this.size = new ArraySize(array.length > 0 ? array[0].length : 0, array.length);\n    this.array = array;\n  }\n  static fromInterpreterValue(value) {\n    if (value instanceof SimpleRangeValue) {\n      return new ArrayValue(value.data);\n    } else {\n      return new ArrayValue([[value]]);\n    }\n  }\n  simpleRangeValue() {\n    return SimpleRangeValue.onlyValues(this.array);\n  }\n  addRows(aboveRow, numberOfRows) {\n    this.array.splice(aboveRow, 0, ...this.nullArrays(numberOfRows, this.width()));\n    this.size.height += numberOfRows;\n  }\n  addColumns(aboveColumn, numberOfColumns) {\n    for (let i = 0; i < this.height(); i++) {\n      this.array[i].splice(aboveColumn, 0, ...new Array(numberOfColumns).fill(EmptyValue));\n    }\n    this.size.width += numberOfColumns;\n  }\n  removeRows(startRow, endRow) {\n    if (this.outOfBound(0, startRow) || this.outOfBound(0, endRow)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfRows = endRow - startRow + 1;\n    this.array.splice(startRow, numberOfRows);\n    this.size.height -= numberOfRows;\n  }\n  removeColumns(leftmostColumn, rightmostColumn) {\n    if (this.outOfBound(leftmostColumn, 0) || this.outOfBound(rightmostColumn, 0)) {\n      throw Error('Array index out of bound');\n    }\n    const numberOfColumns = rightmostColumn - leftmostColumn + 1;\n    for (const row of this.array) {\n      row.splice(leftmostColumn, numberOfColumns);\n    }\n    this.size.width -= numberOfColumns;\n  }\n  nullArrays(count, size) {\n    const result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(new Array(size).fill(EmptyValue));\n    }\n    return result;\n  }\n  get(col, row) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    return this.array[row][col];\n  }\n  set(col, row, value) {\n    if (this.outOfBound(col, row)) {\n      throw Error('Array index out of bound');\n    }\n    this.array[row][col] = value;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  raw() {\n    return this.array;\n  }\n  resize(newSize) {\n    if (this.height() < newSize.height && isFinite(newSize.height)) {\n      this.addRows(this.height(), newSize.height - this.height());\n    }\n    if (this.height() > newSize.height) {\n      throw Error('Resizing to smaller array');\n    }\n    if (this.width() < newSize.width && isFinite(newSize.width)) {\n      this.addColumns(this.width(), newSize.width - this.width());\n    }\n    if (this.width() > newSize.width) {\n      throw Error('Resizing to smaller array');\n    }\n  }\n  outOfBound(col, row) {\n    return col < 0 || row < 0 || row > this.size.height - 1 || col > this.size.width - 1;\n  }\n}\nexport class ErroredArray {\n  constructor(error, size) {\n    this.error = error;\n    this.size = size;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  get(col, row) {\n    return this.error;\n  }\n  width() {\n    return this.size.width;\n  }\n  height() {\n    return this.size.height;\n  }\n  simpleRangeValue() {\n    return this.error;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}