{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { StatType } from './StatType';\n/**\r\n * Provides tracking performance statistics to the engine\r\n */\nexport class Statistics {\n  constructor() {\n    this.stats = new Map([[StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);\n    this.startTimes = new Map();\n  }\n  incrementCriterionFunctionFullCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);\n  }\n  incrementCriterionFunctionPartialCacheUsed() {\n    var _a;\n    const newValue = ((_a = this.stats.get(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);\n  }\n  /**\r\n   * Resets statistics\r\n   */\n  reset() {\n    this.stats.clear();\n    this.startTimes.clear();\n    this.stats.set(StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);\n    this.stats.set(StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);\n  }\n  /**\r\n   * Starts tracking particular statistic.\r\n   *\r\n   * @param name - statistic to start tracking\r\n   */\n  start(name) {\n    if (this.startTimes.get(name)) {\n      throw Error(`Statistics ${name} already started`);\n    } else {\n      this.startTimes.set(name, Date.now());\n    }\n  }\n  /**\r\n   * Stops tracking particular statistic.\r\n   * Raise error if tracking statistic wasn't started.\r\n   *\r\n   * @param name - statistic to stop tracking\r\n   */\n  end(name) {\n    var _a;\n    const now = Date.now();\n    const startTime = this.startTimes.get(name);\n    if (startTime) {\n      let values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;\n      values += now - startTime;\n      this.stats.set(name, values);\n      this.startTimes.delete(name);\n    } else {\n      throw Error(`Statistics ${name} not started`);\n    }\n  }\n  /**\r\n   * Measure given statistic as execution of given function.\r\n   *\r\n   * @param name - statistic to track\r\n   * @param func - function to call\r\n   * @returns result of the function call\r\n   */\n  measure(name, func) {\n    this.start(name);\n    const result = func();\n    this.end(name);\n    return result;\n  }\n  /**\r\n   * Returns the snapshot of current results\r\n   */\n  snapshot() {\n    return new Map(this.stats);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}