{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress, simpleCellAddress } from './Cell';\nimport { InvalidArgumentsError, SheetSizeLimitExceededError } from './errors';\nvar ClipboardOperationType = /*#__PURE__*/(() => {\n  ClipboardOperationType = ClipboardOperationType || {};\n  ClipboardOperationType[ClipboardOperationType[\"COPY\"] = 0] = \"COPY\";\n  ClipboardOperationType[ClipboardOperationType[\"CUT\"] = 1] = \"CUT\";\n  return ClipboardOperationType;\n})();\nexport var ClipboardCellType = /*#__PURE__*/(() => {\n  ClipboardCellType = ClipboardCellType || {};\n  ClipboardCellType[ClipboardCellType[\"VALUE\"] = 0] = \"VALUE\";\n  ClipboardCellType[ClipboardCellType[\"EMPTY\"] = 1] = \"EMPTY\";\n  ClipboardCellType[ClipboardCellType[\"FORMULA\"] = 2] = \"FORMULA\";\n  ClipboardCellType[ClipboardCellType[\"PARSING_ERROR\"] = 3] = \"PARSING_ERROR\";\n  return ClipboardCellType;\n})();\nclass Clipboard {\n  constructor(sourceLeftCorner, width, height, type, content) {\n    this.sourceLeftCorner = sourceLeftCorner;\n    this.width = width;\n    this.height = height;\n    this.type = type;\n    this.content = content;\n  }\n  *getContent(leftCorner) {\n    if (this.content === undefined) {\n      return;\n    } else {\n      for (let y = 0; y < this.height; ++y) {\n        for (let x = 0; x < this.width; ++x) {\n          yield [simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y), this.content[y][x]];\n        }\n      }\n    }\n  }\n}\nexport class ClipboardOperations {\n  constructor(config, dependencyGraph, operations) {\n    this.dependencyGraph = dependencyGraph;\n    this.operations = operations;\n    this.maxRows = config.maxRows;\n    this.maxColumns = config.maxColumns;\n  }\n  cut(leftCorner, width, height) {\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.CUT);\n  }\n  copy(leftCorner, width, height) {\n    const content = [];\n    for (let y = 0; y < height; ++y) {\n      content[y] = [];\n      for (let x = 0; x < width; ++x) {\n        const clipboardCell = this.operations.getClipboardCell(simpleCellAddress(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y));\n        content[y].push(clipboardCell);\n      }\n    }\n    this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.COPY, content);\n  }\n  abortCut() {\n    if (this.clipboard && this.clipboard.type === ClipboardOperationType.CUT) {\n      this.clear();\n    }\n  }\n  clear() {\n    this.clipboard = undefined;\n  }\n  ensureItIsPossibleToCopyPaste(destinationLeftCorner) {\n    if (this.clipboard === undefined) {\n      return;\n    }\n    if (invalidSimpleCellAddress(destinationLeftCorner) || !this.dependencyGraph.sheetMapping.hasSheetWithId(destinationLeftCorner.sheet)) {\n      throw new InvalidArgumentsError('a valid target address.');\n    }\n    const targetRange = AbsoluteCellRange.spanFrom(destinationLeftCorner, this.clipboard.width, this.clipboard.height);\n    if (targetRange.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {\n      throw new SheetSizeLimitExceededError();\n    }\n    if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(targetRange)) {\n      throw new Error('It is not possible to paste onto an array');\n    }\n  }\n  isCutClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.CUT;\n  }\n  isCopyClipboard() {\n    return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.COPY;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}