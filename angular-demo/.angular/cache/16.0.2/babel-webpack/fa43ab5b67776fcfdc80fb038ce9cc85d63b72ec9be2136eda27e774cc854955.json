{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AstNodeType, collectDependencies } from './';\nconst buildCacheEntry = (ast, relativeDependencies, hasVolatileFunction, hasStructuralChangeFunction) => ({\n  ast,\n  relativeDependencies,\n  hasVolatileFunction,\n  hasStructuralChangeFunction\n});\nexport class Cache {\n  constructor(functionRegistry) {\n    this.functionRegistry = functionRegistry;\n    this.cache = new Map();\n  }\n  set(hash, ast) {\n    const astRelativeDependencies = collectDependencies(ast, this.functionRegistry);\n    const cacheEntry = buildCacheEntry(ast, astRelativeDependencies, doesContainFunctions(ast, this.functionRegistry.isFunctionVolatile), doesContainFunctions(ast, this.functionRegistry.isFunctionDependentOnSheetStructureChange));\n    this.cache.set(hash, cacheEntry);\n    return cacheEntry;\n  }\n  get(hash) {\n    return this.cache.get(hash);\n  }\n  maybeSetAndThenGet(hash, ast) {\n    const entryFromCache = this.cache.get(hash);\n    if (entryFromCache !== undefined) {\n      return entryFromCache.ast;\n    } else {\n      this.set(hash, ast);\n      return ast;\n    }\n  }\n}\nexport const doesContainFunctions = (ast, functionCriterion) => {\n  switch (ast.type) {\n    case AstNodeType.EMPTY:\n    case AstNodeType.NUMBER:\n    case AstNodeType.STRING:\n    case AstNodeType.ERROR:\n    case AstNodeType.ERROR_WITH_RAW_INPUT:\n    case AstNodeType.CELL_REFERENCE:\n    case AstNodeType.CELL_RANGE:\n    case AstNodeType.COLUMN_RANGE:\n    case AstNodeType.ROW_RANGE:\n    case AstNodeType.NAMED_EXPRESSION:\n      return false;\n    case AstNodeType.PERCENT_OP:\n    case AstNodeType.PLUS_UNARY_OP:\n    case AstNodeType.MINUS_UNARY_OP:\n      {\n        return doesContainFunctions(ast.value, functionCriterion);\n      }\n    case AstNodeType.CONCATENATE_OP:\n    case AstNodeType.EQUALS_OP:\n    case AstNodeType.NOT_EQUAL_OP:\n    case AstNodeType.LESS_THAN_OP:\n    case AstNodeType.GREATER_THAN_OP:\n    case AstNodeType.LESS_THAN_OR_EQUAL_OP:\n    case AstNodeType.GREATER_THAN_OR_EQUAL_OP:\n    case AstNodeType.MINUS_OP:\n    case AstNodeType.PLUS_OP:\n    case AstNodeType.TIMES_OP:\n    case AstNodeType.DIV_OP:\n    case AstNodeType.POWER_OP:\n      return doesContainFunctions(ast.left, functionCriterion) || doesContainFunctions(ast.right, functionCriterion);\n    case AstNodeType.PARENTHESIS:\n      return doesContainFunctions(ast.expression, functionCriterion);\n    case AstNodeType.FUNCTION_CALL:\n      {\n        if (functionCriterion(ast.procedureName)) {\n          return true;\n        }\n        return ast.args.some(arg => doesContainFunctions(arg, functionCriterion));\n      }\n    case AstNodeType.ARRAY:\n      {\n        return ast.args.some(row => row.some(arg => doesContainFunctions(arg, functionCriterion)));\n      }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}