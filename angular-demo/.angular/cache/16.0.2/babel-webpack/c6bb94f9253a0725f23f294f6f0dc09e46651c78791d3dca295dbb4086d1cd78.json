{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AddressDependency, collectDependencies } from '../parser';\nimport { FormulaVertex } from './FormulaCellVertex';\nimport { RangeVertex } from './RangeVertex';\nexport const collectAddressesDependentToRange = (functionRegistry, vertex, range, lazilyTransformingAstService, dependencyGraph) => {\n  if (vertex instanceof RangeVertex) {\n    const intersection = vertex.range.intersectionWith(range);\n    if (intersection !== undefined) {\n      return Array.from(intersection.addresses(dependencyGraph));\n    } else {\n      return [];\n    }\n  }\n  let formula;\n  let address;\n  if (vertex instanceof FormulaVertex) {\n    formula = vertex.getFormula(lazilyTransformingAstService);\n    address = vertex.getAddress(lazilyTransformingAstService);\n  } else {\n    return [];\n  }\n  return collectDependencies(formula, functionRegistry).filter(d => d instanceof AddressDependency).map(d => d.dependency.toSimpleCellAddress(address)).filter(d => range.addressInRange(d));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}