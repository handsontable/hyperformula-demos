{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class CharPlugin extends FunctionPlugin {\n  char(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 256) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCharCode(Math.trunc(value));\n    });\n  }\n  unichar(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHAR'), value => {\n      if (value < 1 || value >= 1114112) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.CharacterCodeBounds);\n      }\n      return String.fromCodePoint(Math.trunc(value));\n    });\n  }\n}\nCharPlugin.implementedFunctions = {\n  'CHAR': {\n    method: 'char',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'UNICHAR': {\n    method: 'unichar',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}