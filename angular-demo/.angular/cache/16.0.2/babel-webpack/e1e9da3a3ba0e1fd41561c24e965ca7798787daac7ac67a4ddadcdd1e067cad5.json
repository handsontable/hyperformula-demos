{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nimport { PI } from './MathConstantsPlugin';\n/**\r\n * Interpreter plugin containing trigonometric functions\r\n */\nexport class TrigonometryPlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to ACOS(value)\r\n   *\r\n   * Returns the arc cosine (or inverse cosine) of a number.\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  acos(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ACOS'), Math.acos);\n  }\n  asin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ASIN'), Math.asin);\n  }\n  cos(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COS'), Math.cos);\n  }\n  sin(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SIN'), Math.sin);\n  }\n  tan(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TAN'), Math.tan);\n  }\n  atan(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ATAN'), Math.atan);\n  }\n  atan2(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ATAN2'), (x, y) => {\n      if (x === 0 && y === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return Math.atan2(y, x);\n    });\n  }\n  cot(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COT'), arg => arg === 0 ? new CellError(ErrorType.DIV_BY_ZERO) : 1 / Math.tan(arg));\n  }\n  acot(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ACOT'), arg => arg === 0 ? PI / 2 : Math.atan(1 / arg));\n  }\n  sec(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SEC'), arg => 1 / Math.cos(arg));\n  }\n  csc(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CSC'), arg => arg === 0 ? new CellError(ErrorType.DIV_BY_ZERO) : 1 / Math.sin(arg));\n  }\n  sinh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SINH'), Math.sinh);\n  }\n  asinh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ASINH'), Math.asinh);\n  }\n  cosh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COSH'), Math.cosh);\n  }\n  acosh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ACOSH'), Math.acosh);\n  }\n  tanh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('TANH'), Math.tanh);\n  }\n  atanh(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ATANH'), Math.atanh);\n  }\n  coth(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COTH'), arg => arg === 0 ? new CellError(ErrorType.DIV_BY_ZERO) : 1 / Math.tanh(arg));\n  }\n  acoth(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('ACOTH'), arg => arg === 0 ? new CellError(ErrorType.NUM, ErrorMessage.NonZero) : Math.atanh(1 / arg));\n  }\n  sech(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SECH'), arg => 1 / Math.cosh(arg));\n  }\n  csch(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CSCH'), arg => arg === 0 ? new CellError(ErrorType.DIV_BY_ZERO) : 1 / Math.sinh(arg));\n  }\n}\nTrigonometryPlugin.implementedFunctions = {\n  'ACOS': {\n    method: 'acos',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ASIN': {\n    method: 'asin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'COS': {\n    method: 'cos',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SIN': {\n    method: 'sin',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'TAN': {\n    method: 'tan',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ATAN': {\n    method: 'atan',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ATAN2': {\n    method: 'atan2',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'COT': {\n    method: 'cot',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SEC': {\n    method: 'sec',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CSC': {\n    method: 'csc',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SINH': {\n    method: 'sinh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'COSH': {\n    method: 'cosh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'TANH': {\n    method: 'tanh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'COTH': {\n    method: 'coth',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'SECH': {\n    method: 'sech',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'CSCH': {\n    method: 'csch',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ACOT': {\n    method: 'acot',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ASINH': {\n    method: 'asinh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ACOSH': {\n    method: 'acosh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ATANH': {\n    method: 'atanh',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  },\n  'ACOTH': {\n    method: 'acoth',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}