{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError } from '../../Cell';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\n/**\r\n * Interpreter plugin containing COUNTUNIQUE function\r\n */\nexport class CountUniquePlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to COUNTUNIQUE(Number1, Number2, ...).\r\n   *\r\n   * Returns number of unique numbers from arguments\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  countunique(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COUNTUNIQUE'), (...args) => {\n      const valuesSet = new Set();\n      const errorsSet = new Set();\n      for (const scalarValue of args) {\n        if (scalarValue instanceof CellError) {\n          errorsSet.add(scalarValue.type);\n        } else if (scalarValue !== '') {\n          valuesSet.add(scalarValue);\n        }\n      }\n      return valuesSet.size + errorsSet.size;\n    });\n  }\n}\nCountUniquePlugin.implementedFunctions = {\n  'COUNTUNIQUE': {\n    method: 'countunique',\n    parameters: [{\n      argumentType: FunctionArgumentType.SCALAR\n    }],\n    repeatLastArgs: 1,\n    expandRanges: true\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}