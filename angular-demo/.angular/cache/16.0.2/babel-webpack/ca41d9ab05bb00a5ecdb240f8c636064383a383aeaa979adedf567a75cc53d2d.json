{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ArraySizePredictor } from './ArraySize';\nimport { CellContentParser } from './CellContentParser';\nimport { ClipboardOperations } from './ClipboardOperations';\nimport { Config } from './Config';\nimport { CrudOperations } from './CrudOperations';\nimport { DateTimeHelper } from './DateTimeHelper';\nimport { DependencyGraph } from './DependencyGraph';\nimport { SheetSizeLimitExceededError } from './errors';\nimport { Evaluator } from './Evaluator';\nimport { Exporter } from './Exporter';\nimport { GraphBuilder } from './GraphBuilder';\nimport { UIElement } from './i18n';\nimport { ArithmeticHelper } from './interpreter/ArithmeticHelper';\nimport { FunctionRegistry } from './interpreter/FunctionRegistry';\nimport { Interpreter } from './interpreter/Interpreter';\nimport { LazilyTransformingAstService } from './LazilyTransformingAstService';\nimport { buildColumnSearchStrategy } from './Lookup/SearchStrategy';\nimport { NamedExpressions } from './NamedExpressions';\nimport { NumberLiteralHelper } from './NumberLiteralHelper';\nimport { Operations } from './Operations';\nimport { buildLexerConfig, ParserWithCaching, Unparser } from './parser';\nimport { Serialization } from './Serialization';\nimport { findBoundaries, validateAsSheet } from './Sheet';\nimport { EmptyStatistics, Statistics, StatType } from './statistics';\nimport { UndoRedo } from './UndoRedo';\nexport class BuildEngineFactory {\n  static buildFromSheets(sheets, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    return this.buildEngine(config, sheets, namedExpressions);\n  }\n  static buildFromSheet(sheet, configInput = {}, namedExpressions = []) {\n    const config = new Config(configInput);\n    const newsheetprefix = config.translationPackage.getUITranslation(UIElement.NEW_SHEET_PREFIX) + '1';\n    return this.buildEngine(config, {\n      [newsheetprefix]: sheet\n    }, namedExpressions);\n  }\n  static buildEmpty(configInput = {}, namedExpressions = []) {\n    return this.buildEngine(new Config(configInput), {}, namedExpressions);\n  }\n  static rebuildWithConfig(config, sheets, namedExpressions, stats) {\n    return this.buildEngine(config, sheets, namedExpressions, stats);\n  }\n  static buildEngine(config, sheets = {}, inputNamedExpressions = [], stats = config.useStats ? new Statistics() : new EmptyStatistics()) {\n    stats.start(StatType.BUILD_ENGINE_TOTAL);\n    const namedExpressions = new NamedExpressions();\n    const functionRegistry = new FunctionRegistry(config);\n    const lazilyTransformingAstService = new LazilyTransformingAstService(stats);\n    const dependencyGraph = DependencyGraph.buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats);\n    const columnSearch = buildColumnSearchStrategy(dependencyGraph, config, stats);\n    const sheetMapping = dependencyGraph.sheetMapping;\n    const addressMapping = dependencyGraph.addressMapping;\n    for (const sheetName in sheets) {\n      if (Object.prototype.hasOwnProperty.call(sheets, sheetName)) {\n        const sheet = sheets[sheetName];\n        validateAsSheet(sheet);\n        const boundaries = findBoundaries(sheet);\n        if (boundaries.height > config.maxRows || boundaries.width > config.maxColumns) {\n          throw new SheetSizeLimitExceededError();\n        }\n        const sheetId = sheetMapping.addSheet(sheetName);\n        addressMapping.autoAddSheet(sheetId, sheet, boundaries);\n      }\n    }\n    const parser = new ParserWithCaching(config, functionRegistry, sheetMapping.get);\n    lazilyTransformingAstService.parser = parser;\n    const unparser = new Unparser(config, buildLexerConfig(config), sheetMapping.fetchDisplayName, namedExpressions);\n    const dateTimeHelper = new DateTimeHelper(config);\n    const numberLiteralHelper = new NumberLiteralHelper(config);\n    const arithmeticHelper = new ArithmeticHelper(config, dateTimeHelper, numberLiteralHelper);\n    const cellContentParser = new CellContentParser(config, dateTimeHelper, numberLiteralHelper);\n    const arraySizePredictor = new ArraySizePredictor(config, functionRegistry);\n    const operations = new Operations(config, dependencyGraph, columnSearch, cellContentParser, parser, stats, lazilyTransformingAstService, namedExpressions, arraySizePredictor);\n    const undoRedo = new UndoRedo(config, operations);\n    lazilyTransformingAstService.undoRedo = undoRedo;\n    const clipboardOperations = new ClipboardOperations(config, dependencyGraph, operations);\n    const crudOperations = new CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions);\n    inputNamedExpressions.forEach(entry => {\n      crudOperations.ensureItIsPossibleToAddNamedExpression(entry.name, entry.expression, entry.scope);\n      crudOperations.operations.addNamedExpression(entry.name, entry.expression, entry.scope, entry.options);\n    });\n    const exporter = new Exporter(config, namedExpressions, sheetMapping.fetchDisplayName, lazilyTransformingAstService);\n    const serialization = new Serialization(dependencyGraph, unparser, exporter);\n    const interpreter = new Interpreter(config, dependencyGraph, columnSearch, stats, arithmeticHelper, functionRegistry, namedExpressions, serialization, arraySizePredictor, dateTimeHelper);\n    stats.measure(StatType.GRAPH_BUILD, () => {\n      const graphBuilder = new GraphBuilder(dependencyGraph, columnSearch, parser, cellContentParser, stats, arraySizePredictor);\n      graphBuilder.buildGraph(sheets, stats);\n    });\n    const evaluator = new Evaluator(config, stats, interpreter, lazilyTransformingAstService, dependencyGraph, columnSearch);\n    evaluator.run();\n    stats.end(StatType.BUILD_ENGINE_TOTAL);\n    return {\n      config,\n      stats,\n      dependencyGraph,\n      columnSearch,\n      parser,\n      unparser,\n      cellContentParser,\n      evaluator,\n      lazilyTransformingAstService,\n      crudOperations,\n      exporter,\n      namedExpressions,\n      serialization,\n      functionRegistry\n    };\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}