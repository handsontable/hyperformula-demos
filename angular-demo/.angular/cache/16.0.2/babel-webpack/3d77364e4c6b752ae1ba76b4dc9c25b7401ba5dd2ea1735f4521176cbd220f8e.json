{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AdvancedFind } from './AdvancedFind';\nexport class ColumnBinarySearch extends AdvancedFind {\n  constructor(dependencyGraph) {\n    super(dependencyGraph);\n    this.dependencyGraph = dependencyGraph;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars \n  add(value, address) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  remove(value, address) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  change(oldValue, newValue, address) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  applyChanges(contentChanges) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  addColumns(columnsSpan) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removeColumns(columnsSpan) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removeSheet(sheetId) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  moveValues(sourceRange, toRight, toBottom, toSheet) {}\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  removeValues(range) {}\n  /*\r\n   * WARNING: Finding lower/upper bounds in unordered ranges is not supported. When ordering === 'none', assumes matchExactly === true\r\n   */\n  find(searchKey, rangeValue, searchOptions) {\n    return this.basicFind(searchKey, rangeValue, 'row', searchOptions);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}