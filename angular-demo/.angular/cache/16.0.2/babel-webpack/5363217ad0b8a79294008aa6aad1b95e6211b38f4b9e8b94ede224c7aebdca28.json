{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ErrorType } from '../Cell';\nimport { Transformer } from './Transformer';\nexport class CleanOutOfScopeDependenciesTransformer extends Transformer {\n  constructor(sheet) {\n    super();\n    this.sheet = sheet;\n  }\n  isIrreversible() {\n    return true;\n  }\n  fixNodeAddress(address) {\n    return address;\n  }\n  transformCellAddress(dependencyAddress, formulaAddress) {\n    return dependencyAddress.isInvalid(formulaAddress) ? ErrorType.REF : false;\n  }\n  transformCellRange(start, end, formulaAddress) {\n    return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? ErrorType.REF : false;\n  }\n  transformColumnRange(start, end, formulaAddress) {\n    return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? ErrorType.REF : false;\n  }\n  transformRowRange(start, end, formulaAddress) {\n    return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? ErrorType.REF : false;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}