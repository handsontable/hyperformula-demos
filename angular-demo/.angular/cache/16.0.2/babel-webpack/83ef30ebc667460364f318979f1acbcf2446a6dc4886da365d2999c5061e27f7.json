{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nconst MAX_48BIT_INTEGER = 281474976710655;\nconst SHIFT_MIN_POSITIONS = -53;\nconst SHIFT_MAX_POSITIONS = 53;\nexport class BitShiftPlugin extends FunctionPlugin {\n  bitlshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITLSHIFT'), shiftLeft);\n  }\n  bitrshift(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITRSHIFT'), shiftRight);\n  }\n}\nBitShiftPlugin.implementedFunctions = {\n  'BITLSHIFT': {\n    method: 'bitlshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  },\n  'BITRSHIFT': {\n    method: 'bitrshift',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: SHIFT_MIN_POSITIONS,\n      maxValue: SHIFT_MAX_POSITIONS\n    }]\n  }\n};\nfunction shiftLeft(value, positions) {\n  if (positions < 0) {\n    return shiftRight(value, -positions);\n  } else {\n    return validate(value * Math.pow(2, positions));\n  }\n}\nfunction shiftRight(value, positions) {\n  if (positions < 0) {\n    return shiftLeft(value, -positions);\n  } else {\n    return validate(Math.floor(value / Math.pow(2, positions)));\n  }\n}\nfunction validate(result) {\n  if (result > MAX_48BIT_INTEGER) {\n    return new CellError(ErrorType.NUM, ErrorMessage.BitshiftLong);\n  } else {\n    return result;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}