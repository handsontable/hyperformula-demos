{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ALL_UNICODE_LETTERS_ARRAY, NAMED_EXPRESSION_PATTERN, R1C1_CELL_REFERENCE_PATTERN } from './parser-consts';\n/**\r\n * Helper class for recognizing NamedExpression token in text\r\n */\nexport class NamedExpressionMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, '_'];\n    this.namedExpressionRegexp = new RegExp(NAMED_EXPRESSION_PATTERN, 'y');\n    this.r1c1CellRefRegexp = new RegExp(`^${R1C1_CELL_REFERENCE_PATTERN}$`);\n  }\n  /**\r\n   * Method used by the lexer to recognize NamedExpression token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.namedExpressionRegexp.lastIndex = startOffset;\n    const execResult = this.namedExpressionRegexp.exec(text);\n    if (execResult == null || execResult[0] == null) {\n      return null;\n    }\n    if (this.r1c1CellRefRegexp.test(execResult[0])) {\n      return null;\n    }\n    return execResult;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}