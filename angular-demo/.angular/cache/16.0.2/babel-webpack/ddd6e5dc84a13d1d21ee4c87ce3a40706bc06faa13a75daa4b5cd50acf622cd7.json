{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CombinedTransformer } from './dependencyTransformers/CombinedTransformer';\nimport { StatType } from './statistics';\nexport class LazilyTransformingAstService {\n  constructor(stats) {\n    this.stats = stats;\n    this.transformations = [];\n  }\n  version() {\n    return this.transformations.length;\n  }\n  addTransformation(transformation) {\n    if (this.combinedTransformer !== undefined) {\n      this.combinedTransformer.add(transformation);\n    } else {\n      this.transformations.push(transformation);\n    }\n    return this.version();\n  }\n  beginCombinedMode(sheet) {\n    this.combinedTransformer = new CombinedTransformer(sheet);\n  }\n  commitCombinedMode() {\n    if (this.combinedTransformer === undefined) {\n      throw Error('Combined mode wasn\\'t started');\n    }\n    this.transformations.push(this.combinedTransformer);\n    this.combinedTransformer = undefined;\n    return this.version();\n  }\n  applyTransformations(ast, address, version) {\n    this.stats.start(StatType.TRANSFORM_ASTS_POSTPONED);\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (transformation.isIrreversible()) {\n        this.undoRedo.storeDataForVersion(v, address, this.parser.computeHashFromAst(ast));\n        this.parser.rememberNewAst(ast);\n      }\n      const [newAst, newAddress] = transformation.transformSingleAst(ast, address);\n      ast = newAst;\n      address = newAddress;\n    }\n    const cachedAst = this.parser.rememberNewAst(ast);\n    this.stats.end(StatType.TRANSFORM_ASTS_POSTPONED);\n    return [cachedAst, address, this.transformations.length];\n  }\n  *getTransformationsFrom(version, filter) {\n    for (let v = version; v < this.transformations.length; v++) {\n      const transformation = this.transformations[v];\n      if (!filter || filter(transformation)) {\n        yield transformation;\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}