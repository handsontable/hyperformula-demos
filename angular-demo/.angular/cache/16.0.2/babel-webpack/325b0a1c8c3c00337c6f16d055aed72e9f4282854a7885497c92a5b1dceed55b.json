{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class SimpleArithmerticPlugin extends FunctionPlugin {\n  add(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.ADD'), this.arithmeticHelper.addWithEpsilon);\n  }\n  concat(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.CONCAT'), this.arithmeticHelper.concat);\n  }\n  divide(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.DIVIDE'), this.arithmeticHelper.divide);\n  }\n  eq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.EQ'), this.arithmeticHelper.eq);\n  }\n  gt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.GT'), this.arithmeticHelper.gt);\n  }\n  gte(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.GTE'), this.arithmeticHelper.geq);\n  }\n  lt(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.LT'), this.arithmeticHelper.lt);\n  }\n  lte(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.LTE'), this.arithmeticHelper.leq);\n  }\n  minus(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.MINUS'), this.arithmeticHelper.subtract);\n  }\n  multiply(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.MULTIPLY'), this.arithmeticHelper.multiply);\n  }\n  ne(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.NE'), this.arithmeticHelper.neq);\n  }\n  pow(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.POW'), this.arithmeticHelper.pow);\n  }\n  uminus(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.UMINUS'), this.arithmeticHelper.unaryMinus);\n  }\n  upercent(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.UNARY_PERCENT'), this.arithmeticHelper.unaryPercent);\n  }\n  uplus(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HF.UPLUS'), this.arithmeticHelper.unaryPlus);\n  }\n}\nSimpleArithmerticPlugin.implementedFunctions = {\n  'HF.ADD': {\n    method: 'add',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.CONCAT': {\n    method: 'concat',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.STRING,\n      passSubtype: true\n    }]\n  },\n  'HF.DIVIDE': {\n    method: 'divide',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.EQ': {\n    method: 'eq',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.GT': {\n    method: 'gt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.GTE': {\n    method: 'gte',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.LT': {\n    method: 'lt',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.LTE': {\n    method: 'lte',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.MINUS': {\n    method: 'minus',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.MULTIPLY': {\n    method: 'multiply',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.NE': {\n    method: 'ne',\n    parameters: [{\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NOERROR,\n      passSubtype: true\n    }]\n  },\n  'HF.POW': {\n    method: 'pow',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.UMINUS': {\n    method: 'uminus',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.UNARY_PERCENT': {\n    method: 'upercent',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  },\n  'HF.UPLUS': {\n    method: 'uplus',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER,\n      passSubtype: true\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}