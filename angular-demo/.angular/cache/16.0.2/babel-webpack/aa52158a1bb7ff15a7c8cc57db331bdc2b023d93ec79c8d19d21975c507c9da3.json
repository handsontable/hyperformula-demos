{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { getRawValue, isExtendedNumber } from '../InterpreterValue';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class SumprodPlugin extends FunctionPlugin {\n  sumproduct(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SUMPRODUCT'), (...args) => {\n      const width = args[0].width();\n      const height = args[0].height();\n      for (const arg of args) {\n        if (arg.width() !== width || arg.height() !== height) {\n          return new CellError(ErrorType.VALUE, ErrorMessage.EqualLength);\n        }\n      }\n      let ret = 0;\n      const iterators = args.map(arg => arg.iterateValuesFromTopLeftCorner());\n      for (let i = 0; i < width * height; i++) {\n        let acc = 1;\n        for (const it of iterators) {\n          const val = it.next().value;\n          if (val instanceof CellError) {\n            return val;\n          }\n          const coercedVal = this.coerceScalarToNumberOrError(val);\n          if (isExtendedNumber(coercedVal)) {\n            acc *= getRawValue(coercedVal);\n          } else {\n            acc = 0;\n          }\n        }\n        ret += acc;\n      }\n      return ret;\n    });\n  }\n}\nSumprodPlugin.implementedFunctions = {\n  'SUMPRODUCT': {\n    method: 'sumproduct',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }],\n    repeatLastArgs: 1\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}