{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Represents vertex bound to range\r\n */\nexport class RangeVertex {\n  constructor(range) {\n    this.range = range;\n    this.functionCache = new Map();\n    this.criterionFunctionCache = new Map();\n    this.dependentCacheRanges = new Set();\n    this.bruteForce = false;\n  }\n  get start() {\n    return this.range.start;\n  }\n  get end() {\n    return this.range.end;\n  }\n  get sheet() {\n    return this.range.start.sheet;\n  }\n  /**\r\n   * Returns cached value stored for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   */\n  getFunctionValue(functionName) {\n    return this.functionCache.get(functionName);\n  }\n  /**\r\n   * Stores cached value for given function\r\n   *\r\n   * @param functionName - name of the function\r\n   * @param value - cached value\r\n   */\n  setFunctionValue(functionName, value) {\n    this.functionCache.set(functionName, value);\n  }\n  /**\r\n   * Returns cached value for given cache key and criterion text representation\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   * @param criterionString - criterion text (ex. '<=5')\r\n   */\n  getCriterionFunctionValue(cacheKey, criterionString) {\n    var _a;\n    return (_a = this.getCriterionFunctionValues(cacheKey).get(criterionString)) === null || _a === void 0 ? void 0 : _a[0];\n  }\n  /**\r\n   * Returns all cached values stored for given criterion function\r\n   *\r\n   * @param cacheKey - key to retrieve from the cache\r\n   */\n  getCriterionFunctionValues(cacheKey) {\n    var _a;\n    return (_a = this.criterionFunctionCache.get(cacheKey)) !== null && _a !== void 0 ? _a : new Map();\n  }\n  /**\r\n   * Stores all values for given criterion function\r\n   *\r\n   * @param cacheKey - key to store in the cache\r\n   * @param values - map with values\r\n   */\n  setCriterionFunctionValues(cacheKey, values) {\n    this.criterionFunctionCache.set(cacheKey, values);\n  }\n  addDependentCacheRange(dependentRange) {\n    if (dependentRange !== this) {\n      this.dependentCacheRanges.add(dependentRange);\n    }\n  }\n  /**\r\n   * Clears function cache\r\n   */\n  clearCache() {\n    this.functionCache.clear();\n    this.criterionFunctionCache.clear();\n    this.dependentCacheRanges.forEach(range => range.criterionFunctionCache.clear());\n    this.dependentCacheRanges.clear();\n  }\n  /**\r\n   * Returns start of the range (it's top-left corner)\r\n   */\n  getStart() {\n    return this.start;\n  }\n  /**\r\n   * Returns end of the range (it's bottom-right corner)\r\n   */\n  getEnd() {\n    return this.end;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}