{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { configCheckIfParametersNotInConflict, configValueFromParam, configValueFromParamCheck, validateNumberToBeAtLeast, validateNumberToBeAtMost } from './ArgumentSanitization';\nimport { defaultParseToDateTime } from './DateTimeDefault';\nimport { instanceOfSimpleDate } from './DateTimeHelper';\nimport { AlwaysDense } from './DependencyGraph/AddressMapping/ChooseAddressMappingPolicy';\nimport { ConfigValueEmpty, ExpectedValueOfTypeError } from './errors';\nimport { defaultStringifyDateTime, defaultStringifyDuration } from './format/format';\nimport { checkLicenseKeyValidity } from './helpers/licenseKeyValidator';\nimport { HyperFormula } from './HyperFormula';\nconst privatePool = new WeakMap();\nexport class Config {\n  constructor(options = {}, showDeprecatedWarns = true) {\n    const {\n      accentSensitive,\n      binarySearchThreshold,\n      caseSensitive,\n      caseFirst,\n      chooseAddressMappingPolicy,\n      currencySymbol,\n      dateFormats,\n      decimalSeparator,\n      evaluateNullToZero,\n      functionArgSeparator,\n      functionPlugins,\n      ignorePunctuation,\n      leapYear1900,\n      localeLang,\n      language,\n      ignoreWhiteSpace,\n      licenseKey,\n      matchWholeCell,\n      arrayColumnSeparator,\n      arrayRowSeparator,\n      maxRows,\n      maxColumns,\n      nullYear,\n      nullDate,\n      parseDateTime,\n      precisionEpsilon,\n      precisionRounding,\n      stringifyDateTime,\n      stringifyDuration,\n      smartRounding,\n      timeFormats,\n      thousandSeparator,\n      useArrayArithmetic,\n      useStats,\n      undoLimit,\n      useColumnIndex,\n      useRegularExpressions,\n      useWildcards\n    } = options;\n    if (showDeprecatedWarns) {\n      Config.warnDeprecatedOptions(options);\n    }\n    this.useArrayArithmetic = configValueFromParam(useArrayArithmetic, 'boolean', 'useArrayArithmetic');\n    this.accentSensitive = configValueFromParam(accentSensitive, 'boolean', 'accentSensitive');\n    this.caseSensitive = configValueFromParam(caseSensitive, 'boolean', 'caseSensitive');\n    this.caseFirst = configValueFromParam(caseFirst, ['upper', 'lower', 'false'], 'caseFirst');\n    this.ignorePunctuation = configValueFromParam(ignorePunctuation, 'boolean', 'ignorePunctuation');\n    this.chooseAddressMappingPolicy = chooseAddressMappingPolicy !== null && chooseAddressMappingPolicy !== void 0 ? chooseAddressMappingPolicy : Config.defaultConfig.chooseAddressMappingPolicy;\n    this.dateFormats = [...configValueFromParamCheck(dateFormats, Array.isArray, 'array', 'dateFormats')];\n    this.timeFormats = [...configValueFromParamCheck(timeFormats, Array.isArray, 'array', 'timeFormats')];\n    this.functionArgSeparator = configValueFromParam(functionArgSeparator, 'string', 'functionArgSeparator');\n    this.decimalSeparator = configValueFromParam(decimalSeparator, ['.', ','], 'decimalSeparator');\n    this.language = configValueFromParam(language, 'string', 'language');\n    this.ignoreWhiteSpace = configValueFromParam(ignoreWhiteSpace, ['standard', 'any'], 'ignoreWhiteSpace');\n    this.licenseKey = configValueFromParam(licenseKey, 'string', 'licenseKey');\n    this.thousandSeparator = configValueFromParam(thousandSeparator, ['', ',', ' ', '.'], 'thousandSeparator');\n    this.arrayColumnSeparator = configValueFromParam(arrayColumnSeparator, [',', ';'], 'arrayColumnSeparator');\n    this.arrayRowSeparator = configValueFromParam(arrayRowSeparator, [';', '|'], 'arrayRowSeparator');\n    this.localeLang = configValueFromParam(localeLang, 'string', 'localeLang');\n    this.functionPlugins = [...(functionPlugins !== null && functionPlugins !== void 0 ? functionPlugins : Config.defaultConfig.functionPlugins)];\n    this.smartRounding = configValueFromParam(smartRounding, 'boolean', 'smartRounding');\n    this.evaluateNullToZero = configValueFromParam(evaluateNullToZero, 'boolean', 'evaluateNullToZero');\n    this.nullYear = configValueFromParam(nullYear, 'number', 'nullYear');\n    validateNumberToBeAtLeast(this.nullYear, 'nullYear', 0);\n    validateNumberToBeAtMost(this.nullYear, 'nullYear', 100);\n    this.precisionRounding = configValueFromParam(precisionRounding, 'number', 'precisionRounding');\n    validateNumberToBeAtLeast(this.precisionRounding, 'precisionRounding', 0);\n    this.precisionEpsilon = configValueFromParam(precisionEpsilon, 'number', 'precisionEpsilon');\n    validateNumberToBeAtLeast(this.precisionEpsilon, 'precisionEpsilon', 0);\n    this.useColumnIndex = configValueFromParam(useColumnIndex, 'boolean', 'useColumnIndex');\n    this.useStats = configValueFromParam(useStats, 'boolean', 'useStats');\n    this.binarySearchThreshold = binarySearchThreshold !== null && binarySearchThreshold !== void 0 ? binarySearchThreshold : Config.defaultConfig.binarySearchThreshold;\n    this.parseDateTime = configValueFromParam(parseDateTime, 'function', 'parseDateTime');\n    this.stringifyDateTime = configValueFromParam(stringifyDateTime, 'function', 'stringifyDateTime');\n    this.stringifyDuration = configValueFromParam(stringifyDuration, 'function', 'stringifyDuration');\n    this.translationPackage = HyperFormula.getLanguage(this.language);\n    this.errorMapping = this.translationPackage.buildErrorMapping();\n    this.nullDate = configValueFromParamCheck(nullDate, instanceOfSimpleDate, 'IDate', 'nullDate');\n    this.leapYear1900 = configValueFromParam(leapYear1900, 'boolean', 'leapYear1900');\n    this.undoLimit = configValueFromParam(undoLimit, 'number', 'undoLimit');\n    this.useRegularExpressions = configValueFromParam(useRegularExpressions, 'boolean', 'useRegularExpressions');\n    this.useWildcards = configValueFromParam(useWildcards, 'boolean', 'useWildcards');\n    this.matchWholeCell = configValueFromParam(matchWholeCell, 'boolean', 'matchWholeCell');\n    validateNumberToBeAtLeast(this.undoLimit, 'undoLimit', 0);\n    this.maxRows = configValueFromParam(maxRows, 'number', 'maxRows');\n    validateNumberToBeAtLeast(this.maxRows, 'maxRows', 1);\n    this.maxColumns = configValueFromParam(maxColumns, 'number', 'maxColumns');\n    this.currencySymbol = this.setupCurrencySymbol(currencySymbol);\n    validateNumberToBeAtLeast(this.maxColumns, 'maxColumns', 1);\n    privatePool.set(this, {\n      licenseKeyValidityState: checkLicenseKeyValidity(this.licenseKey)\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.decimalSeparator,\n      name: 'decimalSeparator'\n    }, {\n      value: this.functionArgSeparator,\n      name: 'functionArgSeparator'\n    }, {\n      value: this.thousandSeparator,\n      name: 'thousandSeparator'\n    });\n    configCheckIfParametersNotInConflict({\n      value: this.arrayRowSeparator,\n      name: 'arrayRowSeparator'\n    }, {\n      value: this.arrayColumnSeparator,\n      name: 'arrayColumnSeparator'\n    });\n  }\n  setupCurrencySymbol(currencySymbol) {\n    const valueAfterCheck = [...configValueFromParamCheck(currencySymbol, Array.isArray, 'array', 'currencySymbol')];\n    valueAfterCheck.forEach(val => {\n      if (typeof val !== 'string') {\n        throw new ExpectedValueOfTypeError('string[]', 'currencySymbol');\n      }\n      if (val === '') {\n        throw new ConfigValueEmpty('currencySymbol');\n      }\n    });\n    return valueAfterCheck;\n  }\n  /**\r\n   * Proxied property to its private counterpart. This makes the property\r\n   * as accessible as the other Config options but without ability to change the value.\r\n   *\r\n   * @internal\r\n   */\n  get licenseKeyValidityState() {\n    return privatePool.get(this).licenseKeyValidityState;\n  }\n  getConfig() {\n    return getFullConfigFromPartial(this);\n  }\n  mergeConfig(init) {\n    const mergedConfig = Object.assign({}, this.getConfig(), init);\n    Config.warnDeprecatedOptions(init);\n    return new Config(mergedConfig, false);\n  }\n  static warnDeprecatedOptions(options) {\n    Config.warnDeprecatedIfUsed(options.binarySearchThreshold, 'binarySearchThreshold', '1.1');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static warnDeprecatedIfUsed(inputValue, paramName, fromVersion, replacementName) {\n    if (inputValue !== undefined) {\n      if (replacementName === undefined) {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}`);\n      } else {\n        console.warn(`${paramName} option is deprecated since ${fromVersion}, please use ${replacementName}`);\n      }\n    }\n  }\n}\nConfig.defaultConfig = {\n  accentSensitive: false,\n  binarySearchThreshold: 20,\n  currencySymbol: ['$'],\n  caseSensitive: false,\n  caseFirst: 'lower',\n  chooseAddressMappingPolicy: new AlwaysDense(),\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  decimalSeparator: '.',\n  evaluateNullToZero: false,\n  functionArgSeparator: ',',\n  functionPlugins: [],\n  ignorePunctuation: false,\n  language: 'enGB',\n  ignoreWhiteSpace: 'standard',\n  licenseKey: '',\n  leapYear1900: false,\n  localeLang: 'en',\n  matchWholeCell: true,\n  arrayColumnSeparator: ',',\n  arrayRowSeparator: ';',\n  maxRows: 40000,\n  maxColumns: 18278,\n  nullYear: 30,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  parseDateTime: defaultParseToDateTime,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 14,\n  smartRounding: true,\n  stringifyDateTime: defaultStringifyDateTime,\n  stringifyDuration: defaultStringifyDuration,\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  thousandSeparator: '',\n  undoLimit: 20,\n  useRegularExpressions: false,\n  useWildcards: true,\n  useColumnIndex: false,\n  useStats: false,\n  useArrayArithmetic: false\n};\nfunction getFullConfigFromPartial(partialConfig) {\n  var _a;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const ret = {};\n  for (const key in Config.defaultConfig) {\n    const val = (_a = partialConfig[key]) !== null && _a !== void 0 ? _a : Config.defaultConfig[key];\n    if (Array.isArray(val)) {\n      ret[key] = [...val];\n    } else {\n      ret[key] = val;\n    }\n  }\n  return ret;\n}\nexport function getDefaultConfig() {\n  return getFullConfigFromPartial({});\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}