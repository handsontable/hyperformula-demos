{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nexport function defaultParseToDateTime(dateTimeString, dateFormat, timeFormat) {\n  dateTimeString = dateTimeString.replace(/\\s\\s+/g, ' ').trim().toLowerCase();\n  let ampmtoken = dateTimeString.substring(dateTimeString.length - 2);\n  if (ampmtoken === 'am' || ampmtoken === 'pm') {\n    dateTimeString = dateTimeString.substring(0, dateTimeString.length - 2).trim();\n  } else {\n    ampmtoken = dateTimeString.substring(dateTimeString.length - 1);\n    if (ampmtoken === 'a' || ampmtoken === 'p') {\n      dateTimeString = dateTimeString.substring(0, dateTimeString.length - 1).trim();\n    } else {\n      ampmtoken = undefined;\n    }\n  }\n  const dateItems = dateTimeString.split(/[ /.-]/g);\n  if (dateItems.length >= 2 && dateItems[dateItems.length - 2].includes(':')) {\n    dateItems[dateItems.length - 2] = dateItems[dateItems.length - 2] + '.' + dateItems[dateItems.length - 1];\n    dateItems.pop();\n  }\n  const timeItems = dateItems[dateItems.length - 1].split(':');\n  if (ampmtoken !== undefined) {\n    timeItems.push(ampmtoken);\n  }\n  if (dateItems.length === 1) {\n    return defaultParseToTime(timeItems, timeFormat);\n  }\n  if (timeItems.length === 1) {\n    return defaultParseToDate(dateItems, dateFormat);\n  }\n  const parsedDate = defaultParseToDate(dateItems.slice(0, dateItems.length - 1), dateFormat);\n  const parsedTime = defaultParseToTime(timeItems, timeFormat);\n  if (parsedDate === undefined) {\n    return undefined;\n  } else if (parsedTime === undefined) {\n    return undefined;\n  } else {\n    return Object.assign(Object.assign({}, parsedDate), parsedTime);\n  }\n}\nexport const secondsExtendedRegexp = /^ss(\\.(s+|0+))?$/;\nfunction defaultParseToTime(timeItems, timeFormat) {\n  const precision = 1000;\n  if (timeFormat === undefined) {\n    return undefined;\n  }\n  timeFormat = timeFormat.toLowerCase();\n  if (timeFormat.endsWith('am/pm')) {\n    timeFormat = timeFormat.substring(0, timeFormat.length - 5).trim();\n  } else if (timeFormat.endsWith('a/p')) {\n    timeFormat = timeFormat.substring(0, timeFormat.length - 3).trim();\n  }\n  const formatItems = timeFormat.split(':');\n  let ampm = undefined;\n  if (timeItems[timeItems.length - 1] === 'am' || timeItems[timeItems.length - 1] === 'a') {\n    ampm = false;\n    timeItems.pop();\n  } else if (timeItems[timeItems.length - 1] === 'pm' || timeItems[timeItems.length - 1] === 'p') {\n    ampm = true;\n    timeItems.pop();\n  }\n  if (timeItems.length !== formatItems.length) {\n    return undefined;\n  }\n  const hourIndex = formatItems.indexOf('hh');\n  const minuteIndex = formatItems.indexOf('mm');\n  const secondIndex = formatItems.findIndex(item => secondsExtendedRegexp.test(item));\n  const hourString = hourIndex !== -1 ? timeItems[hourIndex] : '0';\n  if (!/^\\d+$/.test(hourString)) {\n    return undefined;\n  }\n  let hours = Number(hourString);\n  if (ampm !== undefined) {\n    if (hours < 0 || hours > 12) {\n      return undefined;\n    }\n    hours = hours % 12;\n    if (ampm) {\n      hours = hours + 12;\n    }\n  }\n  const minuteString = minuteIndex !== -1 ? timeItems[minuteIndex] : '0';\n  if (!/^\\d+$/.test(minuteString)) {\n    return undefined;\n  }\n  const minutes = Number(minuteString);\n  const secondString = secondIndex !== -1 ? timeItems[secondIndex] : '0';\n  if (!/^\\d+(\\.\\d+)?$/.test(secondString)) {\n    return undefined;\n  }\n  const seconds = Math.round(Number(secondString) * precision) / precision;\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n}\nfunction defaultParseToDate(dateItems, dateFormat) {\n  if (dateFormat === undefined) {\n    return undefined;\n  }\n  const formatItems = dateFormat.toLowerCase().split(/[ /.-]/g);\n  if (dateItems.length !== formatItems.length) {\n    return undefined;\n  }\n  const monthIndex = formatItems.indexOf('mm');\n  const dayIndex = formatItems.indexOf('dd');\n  const yearIndexLong = formatItems.indexOf('yyyy');\n  const yearIndexShort = formatItems.indexOf('yy');\n  if (!(monthIndex in dateItems) || !(dayIndex in dateItems) || !(yearIndexLong in dateItems) && !(yearIndexShort in dateItems)) {\n    return undefined;\n  }\n  if (yearIndexLong in dateItems && yearIndexShort in dateItems) {\n    return undefined;\n  }\n  let year;\n  if (yearIndexLong in dateItems) {\n    const yearString = dateItems[yearIndexLong];\n    if (/^\\d+$/.test(yearString)) {\n      year = Number(yearString);\n      if (year < 1000 || year > 9999) {\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  } else {\n    const yearString = dateItems[yearIndexShort];\n    if (/^\\d+$/.test(yearString)) {\n      year = Number(yearString);\n      if (year < 0 || year > 99) {\n        return undefined;\n      }\n    } else {\n      return undefined;\n    }\n  }\n  const monthString = dateItems[monthIndex];\n  if (!/^\\d+$/.test(monthString)) {\n    return undefined;\n  }\n  const month = Number(monthString);\n  const dayString = dateItems[dayIndex];\n  if (!/^\\d+$/.test(dayString)) {\n    return undefined;\n  }\n  const day = Number(dayString);\n  return {\n    year,\n    month,\n    day\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}