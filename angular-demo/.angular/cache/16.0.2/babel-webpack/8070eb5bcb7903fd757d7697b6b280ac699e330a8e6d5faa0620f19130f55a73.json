{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class CodePlugin extends FunctionPlugin {\n  code(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CODE'), value => {\n      if (value.length === 0) {\n        return new CellError(ErrorType.VALUE, ErrorMessage.EmptyString);\n      }\n      return value.charCodeAt(0);\n    });\n  }\n  unicode(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('UNICODE'), value => {\n      var _a;\n      return (_a = value.codePointAt(0)) !== null && _a !== void 0 ? _a : new CellError(ErrorType.VALUE, ErrorMessage.EmptyString);\n    });\n  }\n}\nCodePlugin.implementedFunctions = {\n  'CODE': {\n    method: 'code',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  },\n  'UNICODE': {\n    method: 'unicode',\n    parameters: [{\n      argumentType: FunctionArgumentType.STRING\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}