{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { Config } from './Config';\nimport { ConfigValueTooBigError, ConfigValueTooSmallError, ExpectedOneOfValuesError, ExpectedValueOfTypeError } from './errors';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParam(inputValue, expectedType, paramName) {\n  if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else if (typeof expectedType === 'string') {\n    if (typeof inputValue === expectedType) {\n      return inputValue;\n    } else {\n      throw new ExpectedValueOfTypeError(expectedType, paramName);\n    }\n  } else {\n    if (expectedType.includes(inputValue)) {\n      return inputValue;\n    } else {\n      throw new ExpectedOneOfValuesError(expectedType.map(val => `'${val}'`).join(' '), paramName);\n    }\n  }\n}\nexport function validateNumberToBeAtLeast(value, paramName, minimum) {\n  if (value < minimum) {\n    throw new ConfigValueTooSmallError(paramName, minimum);\n  }\n}\nexport function validateNumberToBeAtMost(value, paramName, maximum) {\n  if (value > maximum) {\n    throw new ConfigValueTooBigError(paramName, maximum);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function configValueFromParamCheck(inputValue, typeCheck, expectedType, paramName) {\n  if (typeCheck(inputValue)) {\n    return inputValue;\n  } else if (typeof inputValue === 'undefined') {\n    return Config.defaultConfig[paramName];\n  } else {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}\nexport function configCheckIfParametersNotInConflict(...params) {\n  const valuesMap = new Map();\n  params.forEach(param => {\n    const names = valuesMap.get(param.value) || [];\n    names.push(param.name);\n    valuesMap.set(param.value, names);\n  });\n  const duplicates = [];\n  for (const entry of valuesMap.values()) {\n    if (entry.length > 1) {\n      duplicates.push(entry);\n    }\n  }\n  if (duplicates.length > 0) {\n    duplicates.forEach(entry => entry.sort());\n    const paramNames = duplicates.map(entry => `[${entry}]`).join('; ');\n    throw new Error(`Config initialization failed. Parameters in conflict: ${paramNames}`);\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validateArgToType(inputValue, expectedType, paramName) {\n  if (typeof inputValue !== expectedType) {\n    throw new ExpectedValueOfTypeError(expectedType, paramName);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}