{"ast":null,"code":"import { isUndefined } from \"../utils/utils\";\nexport function classNameFromInstance(instance) {\n  return functionName(instance.constructor);\n}\nvar FUNC_NAME_REGEXP = /^\\s*function\\s*(\\S*)\\s*\\(/;\nvar NAME = \"name\";\n/* istanbul ignore next too many hacks for IE/old versions of node.js here*/\nexport function functionName(func) {\n  // Engines that support Function.prototype.name OR the nth (n>1) time after\n  // the name has been computed in the following else block.\n  var existingNameProp = func.name;\n  if (existingNameProp) {\n    return existingNameProp;\n  }\n  // hack for IE and engines that do not support Object.defineProperty on function.name (Node.js 0.10 && 0.12)\n  var computedName = func.toString().match(FUNC_NAME_REGEXP)[1];\n  return computedName;\n}\n/**\n * @returns {boolean} - has the property been successfully defined\n */\nexport function defineNameProp(obj, nameValue) {\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);\n  /* istanbul ignore else -> will only run in old versions of node.js */\n  if (isUndefined(namePropDescriptor) || namePropDescriptor.configurable) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n    return true;\n  }\n  /* istanbul ignore next -> will only run in old versions of node.js */\n  return false;\n}\n//# sourceMappingURL=lang_extensions.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}