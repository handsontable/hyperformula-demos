{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class RandomPlugin extends FunctionPlugin {\n  /**\r\n   * Corresponds to RAND()\r\n   *\r\n   * Returns a pseudo-random floating-point random number\r\n   * in the range [0,1).\r\n   *\r\n   * @param ast\r\n   * @param state\r\n   */\n  rand(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RAND'), Math.random);\n  }\n  randbetween(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RANDBETWEEN'), (lower, upper) => {\n      if (upper < lower) {\n        return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);\n      }\n      lower = Math.ceil(lower);\n      upper = Math.floor(upper) + 1;\n      if (lower === upper) {\n        upper += 1;\n      }\n      return lower + Math.floor(Math.random() * (upper - lower));\n    });\n  }\n}\nRandomPlugin.implementedFunctions = {\n  'RAND': {\n    method: 'rand',\n    parameters: [],\n    isVolatile: true\n  },\n  'RANDBETWEEN': {\n    method: 'randbetween',\n    parameters: [{\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }],\n    isVolatile: true\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}