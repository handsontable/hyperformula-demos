{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { AbsoluteCellRange } from './AbsoluteCellRange';\nimport { invalidSimpleCellAddress } from './Cell';\nimport { NamedExpressionDependency } from './parser';\n/**\r\n * Converts dependencies from maybe relative addressing to absolute addressing.\r\n *\r\n * @param deps - list of addresses in R0C0 format\r\n * @param baseAddress - base address with regard to which make a convertion\r\n */\nexport const absolutizeDependencies = (deps, baseAddress) => {\n  return deps.map(dep => dep.absolutize(baseAddress));\n};\nexport const filterDependenciesOutOfScope = deps => {\n  return deps.filter(dep => {\n    if (dep instanceof NamedExpressionDependency) {\n      return true;\n    }\n    if (dep instanceof AbsoluteCellRange) {\n      return !(invalidSimpleCellAddress(dep.start) || invalidSimpleCellAddress(dep.end));\n    } else {\n      return !invalidSimpleCellAddress(dep);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}