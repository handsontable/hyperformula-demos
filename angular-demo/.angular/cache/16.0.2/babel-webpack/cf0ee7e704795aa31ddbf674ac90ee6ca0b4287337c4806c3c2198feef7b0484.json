{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class BitwiseLogicOperationsPlugin extends FunctionPlugin {\n  bitand(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITAND'), (left, right) => left & right);\n  }\n  bitor(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITOR'), (left, right) => left | right);\n  }\n  bitxor(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('BITXOR'), (left, right) => left ^ right);\n  }\n}\nBitwiseLogicOperationsPlugin.implementedFunctions = {\n  'BITAND': {\n    method: 'bitand',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }]\n  },\n  'BITOR': {\n    method: 'bitor',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }]\n  },\n  'BITXOR': {\n    method: 'bitxor',\n    parameters: [{\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 0\n    }]\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}