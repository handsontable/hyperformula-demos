{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { addressKey } from './Cell';\nimport { SimpleRangeValue } from './SimpleRangeValue';\nexport class ContentChanges {\n  constructor() {\n    this.changes = new Map();\n  }\n  static empty() {\n    return new ContentChanges();\n  }\n  addAll(other) {\n    for (const change of other.changes.values()) {\n      this.add(change.address, change);\n    }\n    return this;\n  }\n  addChange(newValue, address, oldValue) {\n    this.addInterpreterValue(newValue, address, oldValue);\n  }\n  exportChanges(exporter) {\n    let ret = [];\n    this.changes.forEach(e => {\n      const change = exporter.exportChange(e);\n      if (Array.isArray(change)) {\n        ret = ret.concat(change);\n      } else {\n        ret.push(change);\n      }\n    });\n    return ret;\n  }\n  getChanges() {\n    return Array.from(this.changes.values());\n  }\n  isEmpty() {\n    return this.changes.size === 0;\n  }\n  add(address, change) {\n    const value = change.value;\n    if (value instanceof SimpleRangeValue) {\n      for (const cellAddress of value.effectiveAddressesFromData(address)) {\n        this.changes.delete(`${cellAddress.sheet},${cellAddress.col},${cellAddress.row}`);\n      }\n    }\n    this.changes.set(addressKey(address), change);\n  }\n  addInterpreterValue(value, address, oldValue) {\n    this.add(address, {\n      address,\n      value,\n      oldValue\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}