{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ErrorType } from '../Cell';\nimport { Transformer } from './Transformer';\nexport class RemoveSheetTransformer extends Transformer {\n  constructor(sheet) {\n    super();\n    this.sheet = sheet;\n  }\n  isIrreversible() {\n    return true;\n  }\n  performEagerTransformations(graph, _parser) {\n    for (const node of graph.arrayFormulaNodes()) {\n      const [newAst] = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService));\n      node.setFormula(newAst);\n    }\n  }\n  fixNodeAddress(address) {\n    return address;\n  }\n  transformCellAddress(dependencyAddress, _formulaAddress) {\n    return this.transformAddress(dependencyAddress);\n  }\n  transformCellRange(start, _end, _formulaAddress) {\n    return this.transformAddress(start);\n  }\n  transformColumnRange(start, _end, _formulaAddress) {\n    return this.transformAddress(start);\n  }\n  transformRowRange(start, _end, _formulaAddress) {\n    return this.transformAddress(start);\n  }\n  transformAddress(address) {\n    if (address.sheet === this.sheet) {\n      return ErrorType.REF;\n    }\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}