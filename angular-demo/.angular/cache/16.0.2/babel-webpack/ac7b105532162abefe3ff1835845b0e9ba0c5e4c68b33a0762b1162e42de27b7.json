{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { ABSOLUTE_OPERATOR, ALL_DIGITS_ARRAY, ALL_UNICODE_LETTERS_ARRAY, CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN } from './parser-consts';\n/**\r\n * Helper class for recognizing CellReference token in text\r\n */\nexport class CellReferenceMatcher {\n  constructor() {\n    this.POSSIBLE_START_CHARACTERS = [...ALL_UNICODE_LETTERS_ARRAY, ...ALL_DIGITS_ARRAY, ABSOLUTE_OPERATOR, \"'\", '_'];\n    this.cellReferenceRegexp = new RegExp(CELL_REFERENCE_WITH_NEXT_CHARACTER_PATTERN, 'y');\n  }\n  /**\r\n   * Method used by the lexer to recognize CellReference token in text\r\n   *\r\n   * Note: using 'y' sticky flag for a named expression which is not supported on IE11...\r\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\r\n   */\n  match(text, startOffset) {\n    this.cellReferenceRegexp.lastIndex = startOffset;\n    const execResult = this.cellReferenceRegexp.exec(text + '@');\n    if (execResult == null || execResult[1] == null) {\n      return null;\n    }\n    execResult[0] = execResult[1];\n    return execResult;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}