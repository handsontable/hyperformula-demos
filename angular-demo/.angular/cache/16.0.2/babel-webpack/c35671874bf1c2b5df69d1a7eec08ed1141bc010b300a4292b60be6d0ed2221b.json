{"ast":null,"code":"import { defaults, forEach } from \"../../../utils/utils\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks\";\nimport { defaultGrammarResolverErrorProvider, defaultGrammarValidatorErrorProvider } from \"../../errors_public\";\nimport { DslMethodsCollectorVisitor } from \"./gast\";\nexport function resolveGrammar(options) {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider\n  });\n  var topRulesTable = {};\n  forEach(options.rules, function (rule) {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, options.errMsgProvider);\n}\nexport function validateGrammar(options) {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n    ignoredIssues: {}\n  });\n  return orgValidateGrammar(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);\n}\nexport function assignOccurrenceIndices(options) {\n  forEach(options.rules, function (currRule) {\n    var methodsCollector = new DslMethodsCollectorVisitor();\n    currRule.accept(methodsCollector);\n    forEach(methodsCollector.dslMethods, function (methods) {\n      forEach(methods, function (currMethod, arrIdx) {\n        currMethod.idx = arrIdx + 1;\n      });\n    });\n  });\n}\n//# sourceMappingURL=gast_resolver_public.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}