{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\n/**\r\n * Error thrown when the sheet of a given ID does not exist.\r\n */\nexport class NoSheetWithIdError extends Error {\n  constructor(sheetId) {\n    super(`There's no sheet with id = ${sheetId}`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name does not exist.\r\n */\nexport class NoSheetWithNameError extends Error {\n  constructor(sheetName) {\n    super(`There's no sheet with name '${sheetName}'`);\n  }\n}\n/**\r\n * Error thrown when the sheet of a given name already exists.\r\n */\nexport class SheetNameAlreadyTakenError extends Error {\n  constructor(sheetName) {\n    super(`Sheet with name ${sheetName} already exists`);\n  }\n}\n/**\r\n * Error thrown when loaded sheet size exceeds configured limits.\r\n */\nexport class SheetSizeLimitExceededError extends Error {\n  constructor() {\n    super('Sheet size limit exceeded');\n  }\n}\n/**\r\n * Error thrown when the the provided string is not a valid formula, i.e does not start with \"=\"\r\n */\nexport class NotAFormulaError extends Error {\n  constructor() {\n    super('This is not a formula');\n  }\n}\n/**\r\n * Error thrown when the given address is invalid.\r\n */\nexport class InvalidAddressError extends Error {\n  constructor(address) {\n    super(`Address (row = ${address.row}, col = ${address.col}) is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given arguments are invalid\r\n */\nexport class InvalidArgumentsError extends Error {\n  constructor(expectedArguments) {\n    super(`Invalid arguments, expected ${expectedArguments}`);\n  }\n}\n/**\r\n * Error thrown when the given sheets are not equal.\r\n */\nexport class SheetsNotEqual extends Error {\n  constructor(sheet1, sheet2) {\n    super(`Sheets ${sheet1} and ${sheet2} are not equal.`);\n  }\n}\n/**\r\n * Error thrown when the given named expression already exists in the workbook and therefore it cannot be added.\r\n */\nexport class NamedExpressionNameIsAlreadyTakenError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is already present`);\n  }\n}\n/**\r\n * Error thrown when the name given for the named expression is invalid.\r\n */\nexport class NamedExpressionNameIsInvalidError extends Error {\n  constructor(expressionName) {\n    super(`Name of Named Expression '${expressionName}' is invalid`);\n  }\n}\n/**\r\n * Error thrown when the given named expression does not exist.\r\n */\nexport class NamedExpressionDoesNotExistError extends Error {\n  constructor(expressionName) {\n    super(`Named Expression '${expressionName}' does not exist`);\n  }\n}\n/**\r\n * Error thrown when there are no operations to be undone by the [[undo]] method.\r\n */\nexport class NoOperationToUndoError extends Error {\n  constructor() {\n    super('There is no operation to undo');\n  }\n}\n/**\r\n * Error thrown when there are no operations to redo by the [[redo]] method.\r\n */\nexport class NoOperationToRedoError extends Error {\n  constructor() {\n    super('There is no operation to redo');\n  }\n}\n/**\r\n * Error thrown when there is nothing to paste by the [[paste]] method.\r\n */\nexport class NothingToPasteError extends Error {\n  constructor() {\n    super('There is nothing to paste');\n  }\n}\nfunction replacer(key, val) {\n  switch (typeof val) {\n    case 'function':\n    case 'symbol':\n      return val.toString();\n    case 'bigint':\n      return 'BigInt(' + val.toString() + ')';\n    default:\n      {\n        if (val instanceof RegExp) {\n          return 'RegExp(' + val.toString() + ')';\n        } else {\n          return val;\n        }\n      }\n  }\n}\n/**\r\n * Error thrown when the given value cannot be parsed.\r\n *\r\n * Checks against the validity in:\r\n *\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[setCellsContents]]\r\n */\nexport class UnableToParseError extends Error {\n  constructor(value) {\n    super(`Unable to parse value: ${JSON.stringify(value, replacer, 4)}`);\n  }\n}\n/**\r\n * Error thrown when the expected value type differs from the given value type.\r\n * It also displays the expected type.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedValueOfTypeError extends Error {\n  constructor(expectedType, paramName) {\n    super(`Expected value of type: ${expectedType} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is an empty string.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueEmpty extends Error {\n  constructor(paramName) {\n    super(`Config parameter ${paramName} cannot be empty.`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too small.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooSmallError extends Error {\n  constructor(paramName, minimum) {\n    super(`Config parameter ${paramName} should be at least ${minimum}`);\n  }\n}\n/**\r\n * Error thrown when supplied config parameter value is too big.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ConfigValueTooBigError extends Error {\n  constructor(paramName, maximum) {\n    super(`Config parameter ${paramName} should be at most ${maximum}`);\n  }\n}\n/**\r\n * Error thrown when the value was expected to be set for a config parameter.\r\n * It also displays the expected value.\r\n * This error might be thrown while setting or updating the [[ConfigParams]].\r\n * The following methods accept [[ConfigParams]] as a parameter:\r\n *\r\n * @see [[buildEmpty]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n * @see [[updateConfig]]\r\n */\nexport class ExpectedOneOfValuesError extends Error {\n  constructor(values, paramName) {\n    super(`Expected one of ${values} for config parameter: ${paramName}`);\n  }\n}\n/**\r\n * Error thrown when computations become suspended.\r\n * To perform any other action wait for the batch to complete or resume the evaluation.\r\n * Relates to:\r\n *\r\n * @see [[batch]]\r\n * @see [[suspendEvaluation]]\r\n * @see [[resumeEvaluation]]\r\n */\nexport class EvaluationSuspendedError extends Error {\n  constructor() {\n    super('Computations are suspended');\n  }\n}\n/**\r\n * Error thrown when translation is missing in translation package.\r\n *\r\n * TODO\r\n */\nexport class MissingTranslationError extends Error {\n  constructor(key) {\n    super(`Translation for ${key} is missing in the translation package you're using.`);\n  }\n}\n/**\r\n * Error thrown when trying to override protected translation.\r\n *\r\n * @see [[registerLanguage]]\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n */\nexport class ProtectedFunctionTranslationError extends Error {\n  constructor(key) {\n    super(`Cannot register translation for function with id: ${key}`);\n  }\n}\n/**\r\n * Error thrown when trying to retrieve not registered language\r\n *\r\n * @see [[getLanguage]]\r\n * @see [[unregisterLanguage]]\r\n */\nexport class LanguageNotRegisteredError extends Error {\n  constructor() {\n    super('Language not registered.');\n  }\n}\n/**\r\n * Error thrown when trying to register already registered language\r\n *\r\n * @see [[registerLanguage]]\r\n */\nexport class LanguageAlreadyRegisteredError extends Error {\n  constructor() {\n    super('Language already registered.');\n  }\n}\n/**\r\n * Error thrown when function plugin is invalid.\r\n *\r\n * @see [[registerFunction]]\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[buildFromArray]]\r\n * @see [[buildFromSheets]]\r\n */\nexport class FunctionPluginValidationError extends Error {\n  static functionNotDeclaredInPlugin(functionId, pluginName) {\n    return new FunctionPluginValidationError(`Function with id ${functionId} not declared in plugin ${pluginName}`);\n  }\n  static functionMethodNotFound(functionName, pluginName) {\n    return new FunctionPluginValidationError(`Function method ${functionName} not found in plugin ${pluginName}`);\n  }\n}\n/**\r\n * Error thrown when trying to register, override or remove function with reserved id.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n * @see [[unregisterFunction]]\r\n */\nexport class ProtectedFunctionError extends Error {\n  static cannotRegisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot register function with id ${functionId}`);\n  }\n  static cannotUnregisterFunctionWithId(functionId) {\n    return new ProtectedFunctionError(`Cannot unregister function with id ${functionId}`);\n  }\n  static cannotUnregisterProtectedPlugin() {\n    return new ProtectedFunctionError('Cannot unregister protected plugin');\n  }\n}\n/**\r\n * Error thrown when selected source location has an array.\r\n */\nexport class SourceLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, source location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when selected target location has an array.\r\n *\r\n * @see [[addRows]]\r\n * @see [[addColumns]]\r\n * @see [[moveCells]]\r\n * @see [[moveRows]]\r\n * @see [[moveColumns]]\r\n * @see [[paste]]\r\n */\nexport class TargetLocationHasArrayError extends Error {\n  constructor() {\n    super('Cannot perform this operation, target location has an array inside.');\n  }\n}\n/**\r\n * Error thrown when named expression contains relative addresses.\r\n *\r\n * @see [[addNamedExpression]]\r\n * @see [[changeNamedExpression]]\r\n */\nexport class NoRelativeAddressesAllowedError extends Error {\n  constructor() {\n    super('Relative addresses not allowed in named expressions.');\n  }\n}\n/**\r\n * Error thrown when alias to a function is already defined.\r\n *\r\n * @see [[registerFunctionPlugin]]\r\n * @see [[registerFunction]]\r\n */\nexport class AliasAlreadyExisting extends Error {\n  constructor(name, pluginName) {\n    super(`Alias id ${name} in plugin ${pluginName} already defined as a function or alias.`);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}