{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { NoSheetWithIdError, NoSheetWithNameError, SheetNameAlreadyTakenError } from '../errors';\nimport { UIElement } from '../i18n';\nfunction canonicalize(sheetDisplayName) {\n  return sheetDisplayName.toLowerCase();\n}\nclass Sheet {\n  constructor(id, displayName) {\n    this.id = id;\n    this.displayName = displayName;\n  }\n  get canonicalName() {\n    return canonicalize(this.displayName);\n  }\n}\nexport class SheetMapping {\n  constructor(languages) {\n    this.languages = languages;\n    this.mappingFromCanonicalName = new Map();\n    this.mappingFromId = new Map();\n    this.lastSheetId = -1;\n    this.fetch = sheetName => {\n      const sheet = this.mappingFromCanonicalName.get(canonicalize(sheetName));\n      if (sheet === undefined) {\n        throw new NoSheetWithNameError(sheetName);\n      }\n      return sheet.id;\n    };\n    this.get = sheetName => {\n      var _a;\n      return (_a = this.mappingFromCanonicalName.get(canonicalize(sheetName))) === null || _a === void 0 ? void 0 : _a.id;\n    };\n    this.fetchDisplayName = sheetId => {\n      return this.fetchSheetById(sheetId).displayName;\n    };\n    this.sheetNamePrefix = languages.getUITranslation(UIElement.NEW_SHEET_PREFIX);\n  }\n  addSheet(newSheetDisplayName = `${this.sheetNamePrefix}${this.lastSheetId + 2}`) {\n    const newSheetCanonicalName = canonicalize(newSheetDisplayName);\n    if (this.mappingFromCanonicalName.has(newSheetCanonicalName)) {\n      throw new SheetNameAlreadyTakenError(newSheetDisplayName);\n    }\n    this.lastSheetId++;\n    const sheet = new Sheet(this.lastSheetId, newSheetDisplayName);\n    this.store(sheet);\n    return sheet.id;\n  }\n  removeSheet(sheetId) {\n    const sheet = this.fetchSheetById(sheetId);\n    if (sheetId == this.lastSheetId) {\n      --this.lastSheetId;\n    }\n    this.mappingFromCanonicalName.delete(sheet.canonicalName);\n    this.mappingFromId.delete(sheet.id);\n  }\n  getDisplayName(sheetId) {\n    var _a;\n    return (_a = this.mappingFromId.get(sheetId)) === null || _a === void 0 ? void 0 : _a.displayName;\n  }\n  *displayNames() {\n    for (const sheet of this.mappingFromCanonicalName.values()) {\n      yield sheet.displayName;\n    }\n  }\n  numberOfSheets() {\n    return this.mappingFromCanonicalName.size;\n  }\n  hasSheetWithId(sheetId) {\n    return this.mappingFromId.has(sheetId);\n  }\n  hasSheetWithName(sheetName) {\n    return this.mappingFromCanonicalName.has(canonicalize(sheetName));\n  }\n  renameSheet(sheetId, newDisplayName) {\n    const sheet = this.fetchSheetById(sheetId);\n    const currentDisplayName = sheet.displayName;\n    if (currentDisplayName === newDisplayName) {\n      return undefined;\n    }\n    const sheetWithThisCanonicalName = this.mappingFromCanonicalName.get(canonicalize(newDisplayName));\n    if (sheetWithThisCanonicalName !== undefined && sheetWithThisCanonicalName.id !== sheet.id) {\n      throw new SheetNameAlreadyTakenError(newDisplayName);\n    }\n    const currentCanonicalName = sheet.canonicalName;\n    this.mappingFromCanonicalName.delete(currentCanonicalName);\n    sheet.displayName = newDisplayName;\n    this.store(sheet);\n    return currentDisplayName;\n  }\n  sheetNames() {\n    return Array.from(this.mappingFromId.values()).map(s => s.displayName);\n  }\n  store(sheet) {\n    this.mappingFromId.set(sheet.id, sheet);\n    this.mappingFromCanonicalName.set(sheet.canonicalName, sheet);\n  }\n  fetchSheetById(sheetId) {\n    const sheet = this.mappingFromId.get(sheetId);\n    if (sheet === undefined) {\n      throw new NoSheetWithIdError(sheetId);\n    }\n    return sheet;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}