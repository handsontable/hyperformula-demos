{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2023 Handsoncode. All rights reserved.\r\n */\nimport { CellError, ErrorType } from '../../Cell';\nimport { ErrorMessage } from '../../error-message';\nimport { getRawValue, isExtendedNumber } from '../InterpreterValue';\nimport { centralF, chisquare, corrcoeff, covariance, geomean, mean, normal, stdev, studentt, sumsqerr, variance } from './3rdparty/jstat/jstat';\nimport { FunctionArgumentType, FunctionPlugin } from './FunctionPlugin';\nexport class StatisticalAggregationPlugin extends FunctionPlugin {\n  avedev(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('AVEDEV'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const avg = mean(coerced);\n      return coerced.reduce((a, b) => a + Math.abs(b - avg), 0) / coerced.length;\n    });\n  }\n  devsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('DEVSQ'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return 0;\n      }\n      return sumsqerr(coerced);\n    });\n  }\n  geomean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('GEOMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return geomean(coerced);\n    });\n  }\n  harmean(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('HARMEAN'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      if (coerced.length === 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.OneValue);\n      }\n      for (const val of coerced) {\n        if (val <= 0) {\n          return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);\n        }\n      }\n      return coerced.length / coerced.reduce((a, b) => a + 1 / b, 0);\n    });\n  }\n  correl(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CORREL'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return corrcoeff(ret[0], ret[1]);\n    });\n  }\n  rsq(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('RSQ'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return Math.pow(corrcoeff(ret[0], ret[1]), 2);\n    });\n  }\n  covariancep(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.P'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n < 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.OneValue);\n      }\n      if (n === 1) {\n        return 0;\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / n;\n    });\n  }\n  covariances(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('COVARIANCE.S'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]);\n    });\n  }\n  ztest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('Z.TEST'), (range, x, sigma) => {\n      const vals = this.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());\n      if (vals instanceof CellError) {\n        return vals;\n      }\n      const n = vals.length;\n      if (sigma === undefined) {\n        if (n < 2) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        sigma = stdev(vals, true);\n      }\n      if (n < 1) {\n        return new CellError(ErrorType.NA, ErrorMessage.OneValue);\n      }\n      if (sigma === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return 1 - normal.cdf((mean(vals) - x) / (sigma / Math.sqrt(n)), 0, 1);\n    });\n  }\n  ftest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('F.TEST'), (dataX, dataY) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      if (arrX.length <= 1 || arrY.length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const vx = variance(arrX, true);\n      const vy = variance(arrY, true);\n      if (vx === 0 || vy === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      const r = vx / vy;\n      const v = centralF.cdf(r, arrX.length - 1, arrY.length - 1);\n      return 2 * Math.min(v, 1 - v);\n    });\n  }\n  steyx(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('STEYX'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 2) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      return Math.sqrt((sumsqerr(ret[0]) - Math.pow(covariance(ret[0], ret[1]) * (n - 1), 2) / sumsqerr(ret[1])) / (n - 2));\n    });\n  }\n  slope(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SLOPE'), (dataX, dataY) => {\n      if (dataX.numberOfElements() !== dataY.numberOfElements()) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      const n = ret[0].length;\n      if (n <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      return covariance(ret[0], ret[1]) * (n - 1) / sumsqerr(ret[1]);\n    });\n  }\n  chisqtest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('CHISQ.TEST'), (dataX, dataY) => {\n      const r = dataX.height();\n      const c = dataX.width();\n      if (dataY.height() !== r || dataY.width() !== c) {\n        return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n      }\n      const ret = parseTwoArrays(dataX, dataY);\n      if (ret instanceof CellError) {\n        return ret;\n      }\n      if (ret[0].length <= 1) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n      }\n      let sum = 0;\n      for (let i = 0; i < ret[0].length; i++) {\n        if (ret[1][i] === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        sum += Math.pow(ret[0][i] - ret[1][i], 2) / ret[1][i];\n      }\n      if (sum < 0) {\n        return new CellError(ErrorType.NUM, ErrorMessage.NaN);\n      }\n      return 1 - chisquare.cdf(sum, r > 1 && c > 1 ? (r - 1) * (c - 1) : r * c - 1);\n    });\n  }\n  ttest(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('T.TEST'), (dataX, dataY, tails, type) => {\n      const arrX = this.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());\n      const arrY = this.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());\n      if (arrX instanceof CellError) {\n        return arrX;\n      }\n      if (arrY instanceof CellError) {\n        return arrY;\n      }\n      const n = arrX.length;\n      const m = arrY.length;\n      if (type === 1) {\n        if (m !== n) {\n          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);\n        }\n        if (n <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sub = Array(n);\n        for (let i = 0; i < n; i++) {\n          sub[i] = arrX[i] - arrY[i];\n        }\n        const s = stdev(sub, true);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs(Math.sqrt(n) * mean(sub) / s);\n        return tails * (1 - studentt.cdf(t, n - 1));\n      } else if (type === 2) {\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const s = (sumsqerr(arrX) + sumsqerr(arrY)) / (n + m - 2);\n        if (s === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(s * (1 / n + 1 / m)));\n        return tails * (1 - studentt.cdf(t, n + m - 2));\n      } else {\n        //type === 3\n        if (n <= 1 || m <= 1) {\n          return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.TwoValues);\n        }\n        const sx = variance(arrX, true);\n        const sy = variance(arrY, true);\n        if (sx === 0 && sy === 0) {\n          return new CellError(ErrorType.DIV_BY_ZERO);\n        }\n        const t = Math.abs((mean(arrX) - mean(arrY)) / Math.sqrt(sx / n + sy / m));\n        const v = Math.pow(sx / n + sy / m, 2) / (Math.pow(sx / n, 2) / (n - 1) + Math.pow(sy / m, 2) / (m - 1));\n        return tails * (1 - studentt.cdf(t, v));\n      }\n    });\n  }\n  skew(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, true);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) * n / (n - 1) / (n - 2);\n    });\n  }\n  skewp(ast, state) {\n    return this.runFunction(ast.args, state, this.metadata('SKEW.P'), (...args) => {\n      const coerced = this.arithmeticHelper.coerceNumbersExactRanges(args);\n      if (coerced instanceof CellError) {\n        return coerced;\n      }\n      const n = coerced.length;\n      if (n < 3) {\n        return new CellError(ErrorType.DIV_BY_ZERO, ErrorMessage.ThreeValues);\n      }\n      const avg = mean(coerced);\n      const s = stdev(coerced, false);\n      if (s === 0) {\n        return new CellError(ErrorType.DIV_BY_ZERO);\n      }\n      return coerced.reduce((a, b) => a + Math.pow((b - avg) / s, 3), 0) / n;\n    });\n  }\n}\nStatisticalAggregationPlugin.implementedFunctions = {\n  'AVEDEV': {\n    method: 'avedev',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'DEVSQ': {\n    method: 'devsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'GEOMEAN': {\n    method: 'geomean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'HARMEAN': {\n    method: 'harmean',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'CORREL': {\n    method: 'correl',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'RSQ': {\n    method: 'rsq',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.P': {\n    method: 'covariancep',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'COVARIANCE.S': {\n    method: 'covariances',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'Z.TEST': {\n    method: 'ztest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.NUMBER\n    }, {\n      argumentType: FunctionArgumentType.NUMBER,\n      optionalArg: true\n    }]\n  },\n  'F.TEST': {\n    method: 'ftest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'STEYX': {\n    method: 'steyx',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'SLOPE': {\n    method: 'slope',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'CHISQ.TEST': {\n    method: 'chisqtest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }]\n  },\n  'T.TEST': {\n    method: 'ttest',\n    parameters: [{\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.RANGE\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 2\n    }, {\n      argumentType: FunctionArgumentType.INTEGER,\n      minValue: 1,\n      maxValue: 3\n    }]\n  },\n  'SKEW': {\n    method: 'skew',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  },\n  'SKEW.P': {\n    method: 'skewp',\n    parameters: [{\n      argumentType: FunctionArgumentType.ANY\n    }],\n    repeatLastArgs: 1\n  }\n};\nStatisticalAggregationPlugin.aliases = {\n  COVAR: 'COVARIANCE.P',\n  FTEST: 'F.TEST',\n  PEARSON: 'CORREL',\n  ZTEST: 'Z.TEST',\n  CHITEST: 'CHISQ.TEST',\n  TTEST: 'T.TEST',\n  COVARIANCEP: 'COVARIANCE.P',\n  COVARIANCES: 'COVARIANCE.S',\n  SKEWP: 'SKEW.P'\n};\nfunction parseTwoArrays(dataX, dataY) {\n  const xit = dataX.iterateValuesFromTopLeftCorner();\n  const yit = dataY.iterateValuesFromTopLeftCorner();\n  let x, y;\n  const arrX = [];\n  const arrY = [];\n  while (x = xit.next(), y = yit.next(), !x.done && !y.done) {\n    const xval = x.value;\n    const yval = y.value;\n    if (xval instanceof CellError) {\n      return xval;\n    } else if (yval instanceof CellError) {\n      return yval;\n    } else if (isExtendedNumber(xval) && isExtendedNumber(yval)) {\n      arrX.push(getRawValue(xval));\n      arrY.push(getRawValue(yval));\n    }\n  }\n  return [arrX, arrY];\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}